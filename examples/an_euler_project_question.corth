/*

    ============================
    ==== Euler project #??? ====
    ============================

This example solves an euler project question that I don't know the number of.

Let's say there is a function, f(x).

If x is odd, f(x) returns 3x + 1.
If x is even, f(x) returns x / 2.

We keep doing that until we reach 1.

Our goal is to find the number with the most amount of steps required to reach 1 using that function.

START and END macros define the search ends. When START = 1 and END = 1000 the result is,

Found better, 2. This number requires 1 steps
Found better, 3. This number requires 7 steps
Found better, 6. This number requires 8 steps
Found better, 7. This number requires 16 steps
Found better, 9. This number requires 19 steps
Found better, 18. This number requires 20 steps
Found better, 25. This number requires 23 steps
Found better, 27. This number requires 111 steps
Found better, 54. This number requires 112 steps
Found better, 73. This number requires 115 steps
Found better, 97. This number requires 118 steps
Found better, 129. This number requires 121 steps
Found better, 171. This number requires 124 steps
Found better, 231. This number requires 127 steps
Found better, 313. This number requires 130 steps
Found better, 327. This number requires 143 steps
Found better, 649. This number requires 144 steps
Found better, 703. This number requires 170 steps
Found better, 871. This number requires 178 steps
*/


include libs/linux/io.corth


macro START 1 endmacro
macro END 10000000 endmacro

memory best sizeof(int) end

memory n sizeof(int) end
memory step sizeof(int) end

macro set-best best swp store8 endmacro
macro set-n       n swp store8 endmacro
macro set-step step swp store8 endmacro

macro get-best best load8 endmacro
macro get-n       n load8 endmacro
macro get-step step load8 endmacro

macro update
  get-n 2 % 0 = if 
    get-n 2 / set-n
  else
    get-n 3 * inc set-n
  end
endmacro

proc main
  -- int
in
  START while dup END <= do
    dup set-n
    0 set-step

    while get-n 1 != do
      update
      get-step inc set-step
    end

    get-step get-best > if
      "Found better, " puts
      dup putu
      ". This number requires " puts
      get-step putu
      " steps\n" puts
      get-step set-best
    end
  inc end drop

  0
end
