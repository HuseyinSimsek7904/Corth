/*

    ============================
    ==== Euler project #??? ====
    ============================

This example solves an euler project question that I don't know the number of.

Let's say there is a function, f(x).

If x is odd, f(x) returns 3x + 1.
If x is even, f(x) returns x / 2.

We keep doing that until we reach 1.

Our goal is to find the number with the most amount of steps required to reach 1 using that function.

START and END macros define the search ends. When START = 1 and END = 1000 the result is,

Found better, 2. This number requires 1 steps
Found better, 3. This number requires 7 steps
Found better, 6. This number requires 8 steps
Found better, 7. This number requires 16 steps
Found better, 9. This number requires 19 steps
Found better, 18. This number requires 20 steps
Found better, 25. This number requires 23 steps
Found better, 27. This number requires 111 steps
Found better, 54. This number requires 112 steps
Found better, 73. This number requires 115 steps
Found better, 97. This number requires 118 steps
Found better, 129. This number requires 121 steps
Found better, 171. This number requires 124 steps
Found better, 231. This number requires 127 steps
Found better, 313. This number requires 130 steps
Found better, 327. This number requires 143 steps
Found better, 649. This number requires 144 steps
Found better, 703. This number requires 170 steps
Found better, 871. This number requires 178 steps
*/


include libs/linux_x86/stdio.corth


macro START 1        endmacro
macro END   10000000 endmacro

macro function
  // int: x -- int: f(x)
  dup is-even if 
    2 /
  else
    3 * inc
  end
endmacro

proc main
  int int -- int
in let argc argv in
  memory steps sizeof(int) in
  memory best  sizeof(int) in
         
    START while dup END <= do
      dup
      0 steps !64

      while dup 1 != do
        function
        steps @64 inc steps !64
      end drop

      steps @64 best @64 > if
        "Found better, " puts
        dup putu
        ". This number requires " puts
        steps @64 putu
        " steps\n" puts
        steps @64 best !64
      end
    inc end drop
  end end
end 0 end
