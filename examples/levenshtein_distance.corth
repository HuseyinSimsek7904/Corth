include libs/linux_x86/io.corth

// Max length of string +1. If a longer string is used, -may- crash.
// Max length should not be more than 256.
// UNKNOWN is used to indicate that the value is unknown.
// Any other number means the value is known and it can be used.

macro MAX-SIZE 256 endmacro
macro UNKNOWN 0xff endmacro

memory ptr1 sizeof(ptr) and
       ptr2 sizeof(ptr) end

memory remember MAX-SIZE MAX-SIZE * end

memory number-of-calls sizeof(int) end
memory number-of-rembs sizeof(int) end

macro reset-remember
  number-of-calls 0 store8
  remember MAX-SIZE sqr UNKNOWN memset8
endmacro

// Extremely slow, uses recursion not brain.
// This example shows the extreme need of ELIF.
proc rec-lev
  // int: len-s1 int: len-s2 -- int: min
  int int -- int
in
  // Lets say s1 is the string we modify, and s2 is the destination.
  let len1 len2 in
    len2 MAX-SIZE * len1 + remember +
    // 'address' is the 'remember'ed value's address, if there is one.
    let address in
      address load
      // 'value' is the 'remember'ed value, if there is one
      let value in
        value UNKNOWN = if
          // There is not a known value at this address  
          number-of-calls dup load8 inc store8
          
          len1 0 = if
            len2
          else
            len2 0 = if
              len1
            else
              ptr1 load8 len1 + dec load
              ptr2 load8 len2 + dec load
              = if
                // Last two characters are the same
                len1 dec len2 dec rec-lev
              else
                // Replace character
                len1 dec len2 dec rec-lev

                // Remove character
                len1 dec len2     rec-lev

                // Add character
                len1     len2 dec rec-lev

                // Find the minimum required
                min3 inc
              end
            end
          end
          
          // Save that for future use
          dup address swp store
        else
          // There is a known value at this address
          number-of-rembs dup load8 inc store8
          
          value
        end
      end
    end
  end
end

proc main
  -- int
in
  reset-remember

  "aaaaaaaaa"
  "bbbbbbbbb"
  
  let _ptr1 len1 _ptr2 len2 in
    ptr1 _ptr1 store8
    ptr2 _ptr2 store8
    "lev('" puts _ptr1 len1 puts "', '" puts _ptr2 len2 puts "') = " puts
    len1 len2 rec-lev puti "\n" puts
    "Number of calls = " puts number-of-calls load8 putu "\n" puts
    "Number of remembers = " puts number-of-rembs load8 putu "\n" puts
  end

  0
end

/*

  COMPLEXITY FOR rec-lev(a, b):

Best case scenario where both strings end with the same sub-strings (s):
  (Memoization make no difference)

  = O(|s|)

Worst case scenario where both strings never have any common sub-strings:
  = O((|a| + 1) * (|b| + 1))

*/
 
