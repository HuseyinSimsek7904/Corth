include libs/linux_x86/stdio.corth

// Max length of string. If a longer string is used, -may- crash.
// Max length should not be more than 256.
// UNKNOWN is used to indicate that the value is unknown.
// Any other number means the value is known and it can be used.

macro MAX-SIZE 0x100 endmacro
macro UNKNOWN  0xff endmacro

memory ptr1 sizeof(ptr) end
memory ptr2 sizeof(ptr) end

memory remember 0x10000 end

memory number-of-calls sizeof(int) end
memory number-of-rembs sizeof(int) end

macro reset-remember
  0 number-of-calls !64
  remember MAX-SIZE sqr UNKNOWN memset8
endmacro

// Add and remove has the same costs, otherwise the function would not make sense
macro IGNORE-COST  0  endmacro
macro REPLACE-COST 1  endmacro
macro REMOVE-COST  1  endmacro

proc rec-lev
  // int: len-s1 int: len-s2 -- int: min
  int int -- int
in
  // Lets say s1 is the string we modify, and s2 is the destination.
  let len1 len2 in
    len1 is-zero if
      len2 IGNORE-COST * return
    end

    len2 is-zero if
      len1 IGNORE-COST * return
    end
    
    len2 dec MAX-SIZE * len1 dec + remember +
    // 'address' is the 'remember'ed value's address, if there is one.
    let address in
      address @8 dup
      // 'value' is the 'remember'ed value, if there is one
      
      UNKNOWN != if
        // There is a known value at this address
        number-of-rembs @64 inc number-of-rembs !64

        return
      end drop

      // There is not a known value at this address  
      number-of-calls @64 inc number-of-calls !64

      ptr1 @64 len1 + dec @8
      ptr2 @64 len2 + dec @8
      = if
        // Last characters are the same, ignore
        len1 dec len2 dec rec-lev IGNORE-COST +
      else
        // Replace character
        len1 dec len2 dec rec-lev REPLACE-COST +

        // Remove character
        len1 dec len2     rec-lev REMOVE-COST +

        // Add character
        len1     len2 dec rec-lev REMOVE-COST +

        // Find the minimum required
        min3
      end

      // Save that for future use
      dup address !8
    end
  end
end

proc main
  int int -- int
in let argc argv in
  reset-remember

  "pickle"
  "pikla"
  
  let _ptr1 len1 _ptr2 len2 in
    _ptr1 ptr1 !64
    _ptr2 ptr2 !64
    "lev('" puts _ptr1 len1 puts "', '" puts _ptr2 len2 puts "') = " puts
    len1 len2 rec-lev puti putnl
    "Number of calls = " puts number-of-calls @64 putu putnl
    "Number of remembers = " puts number-of-rembs @64 putu putnl
  end
end 0 end

/*

  COMPLEXITY FOR rec-lev(a, b):

Best case scenario where both strings end with the same sub-strings (s):
  (Memoization make no difference)

  = O(|s|)

Worst case scenario where both strings never have any common sub-strings:
  = O((|a| + 1) * (|b| + 1))

*/
 
