/*

  Mandelbrot Set Renderer

This example renders the mandelbrot set on the console.
Since Corth does not have floating point aritmetic (and since its hard), a fixed point number library is used.

*/


include libs/linux_x86/io.corth
include libs/math/complex.corth
include libs/math/fixed64.corth
include libs/memory.corth


macro WIDTH 128 endmacro
macro HEIGHT 64 endmacro
macro HALF-WIDTH WIDTH 2 / endmacro
macro HALF-HEIGHT HEIGHT 2 / endmacro
macro CHARS "          .........--------+++++++******=====????$$$@@%" drop endmacro
macro MAX-ITERATION 55 endmacro
macro BUFFER-SIZE WIDTH 2 * 1 + HEIGHT * endmacro


macro clear-screen
  0 while dup HEIGHT inc < do
    "\x8d\xc2" puts
  inc end drop
endmacro


// Camera position and zoom
memory camera-pos  sizeof(comp)    and
       camera-zoom sizeof(fixed64) end


proc get-iteration
  comp -- int
in
  memory z sizeof(comp) and
         c sizeof(comp) in

    c store-complex
    0 0 z store-complex

    0 while
      // Break if reached the max iteration
      dup MAX-ITERATION dec <
    do
      inc
      
      // Calculate next Z
      z load-complex sqr-c c load-complex add-cc z store-complex

      // Check if |Z| > 2 (|Z|^2 > 4)
      z load-complex lengths-c 4 int-to-fixed64 > if dec break end
    end
  end
end


proc render
  --
in
  memory number sizeof(comp) and
         buffer BUFFER-SIZE  and
         i      sizeof(ptr)  in

    // Screen is buffered, and when the buffer is filled; it is dumped on the screen.
    buffer i !64

    0 while dup HEIGHT < do let console-y in
      console-y HALF-HEIGHT - int-to-fixed64
      let imag in
        0 while dup WIDTH < do let console-x in
          console-x HALF-WIDTH - int-to-fixed64
          imag camera-zoom @64 mul-cf camera-pos load-complex add-cc

          // Get character
          get-iteration CHARS + @8 let char in          
            // Save character to buffer
            char i @64 !8 i @64 inc i !64
            char i @64 !8 i @64 inc i !64
          end
        console-x end inc end drop

        '\n' i @64 !8 i @64 inc i !64
      end
    console-y end inc end drop

    buffer BUFFER-SIZE puts
  end
end


proc main
  int int -- int
in let argc argv in
  0x0000000010080100 neg 0x00000000fffe9080 camera-pos store-complex  // Set camera pos to -0.062622129902656 + 0.9999780950616818176i 
  0x0000000100000000 camera-zoom !64                                  // Set camera zoom to 1

  "\n" puts

  while true do
    render
    clear-screen
    camera-zoom @64 0x00000000fe000000 mul-ff camera-zoom !64         // Set camera zoom to 0.9921874997704392704 times itself
  end
end 0 end
