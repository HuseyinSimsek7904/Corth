/*

  Mandelbrot Set Renderer

This example renders the mandelbrot set on the console.
Since Corth does not have floating point aritmetic (and since its hard), a fixed point number library is used.

*/


include "linux_x86/stdio.corth"
include "math/complex.corth"
include "math/fixed64.corth"
include "core/stack.corth"


macro MAX-ITERATION 55  endmacro
macro WIDTH         64  endmacro
macro HEIGHT        32  endmacro

macro HALF-WIDTH  WIDTH  2 / endmacro
macro HALF-HEIGHT HEIGHT 2 / endmacro

// BUFFER-SIZE = WIDTH 2 *  1 + HEIGHT *
macro BUFFER-SIZE   8256  endmacro

macro CHARS "          .........--------+++++++******=====????$$$@@%" drop endmacro

proc get-iteration
  comp -> int
in
  memory z sizeof(comp) in
  memory c sizeof(comp) in

    c store-complex
    0 0 z store-complex

    0 while
      // Break if reached the max iteration
      dup MAX-ITERATION dec <
    do
      // Calculate next Z
      z load-complex sqr-c c load-complex add-cc z store-complex

      // Check if |Z| > 2 (|Z|^2 > 4)
      z load-complex lengths-c 4 int-to-fixed64 > if break end
    inc end
  end end
end


proc main
  int int -> int
in let argc argv in
  memory camera-pos  sizeof(comp)    in
  memory camera-zoom sizeof(fixed64) in

    0x0000000010080100 neg 0x00000000fffe9080 camera-pos store-complex  // Set camera pos to -0.062622129902656 + 0.9999780950616818176i
    0x0000000100000000 camera-zoom !64                                  // Set camera zoom to 1

    // Enable alternative display and clear the screen.
    "\x1b?1049h\x1b[2J" puts

    while
      // Move the cursor to the top left corner.
      "\x1b[;H" puts

      // Render the frame.
      memory number sizeof(comp)  in
      memory buffer BUFFER-SIZE   in
      memory i      sizeof(ptr)   in

        // Screen is buffered, and when the buffer is filled; it is dumped on the screen.
        buffer i !64

        // Loop over the lines.
        0 while dup HEIGHT < do peek console-y in
          console-y HALF-HEIGHT - int-to-fixed64 let imag in

            // Loop over the columns in the line.
            0 while dup WIDTH < do peek console-x in
              console-x HALF-WIDTH - int-to-fixed64

              // Get the character that should be appended to the buffer.
              imag camera-zoom @64 mul-cf camera-pos load-complex add-cc get-iteration CHARS + @8 let char in
                // Save character to buffer
                char i @64 !8 i @inc64
                char i @64 !8 i @inc64
              end
            end inc end drop

            // Append a newline at the end of the buffer.
            '\n' i @64 !8

            // Shift the character pointer.
            i @inc64
          end
        end inc end drop

        // Dump the buffer on the screen.
        buffer BUFFER-SIZE puts
      end end end

      // Set camera zoom to 0.9921874997704392704 times itself
      camera-zoom @64 0x00000000fe000000 mul-ff camera-zoom !64

      // Keep repeating until the camera-zoom is equal to zero.
      camera-zoom @64 isn-zero do
    end

    // Disable alternative display.
    "\x1b[?1049l" puts
  end end
end 0 end
