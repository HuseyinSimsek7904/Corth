/*

    ==============================
    ==== Game of Life example ====
    ==============================

Simulates and renders game of life.
Requires a console that can handle the reverse line feed character.

ROWS and COLS can be changed to make the board bigger or smaller.

NOTE: There is a bug that if ROWS and COLS are not divisible by each other, algorithm acts weird.
*/

include libs/linux/io.corth
include libs/memory.corth

macro ROWS 16 endmacro
macro COLS 16 endmacro

macro CELLS ROWS COLS * endmacro

memory board CELLS end
memory old CELLS end

memory row-no sizeof(int) end
memory col-no sizeof(int) end

memory count sizeof(int) end

// Sets the value of row or column
macro set-row-no row-no swp store8 endmacro
macro set-col-no col-no swp store8 endmacro

// Gets the value of row or column
macro get-row-no row-no load8 endmacro
macro get-col-no col-no load8 endmacro

macro get-id
  // row-no col-no -- id

  COLS % swp ROWS % COLS * +
endmacro

macro was-alive
  // row-no col-no -- is-alive

  get-id old get 0 !=
endmacro

macro set-alive
  // row-no col-no --

  get-id board 0xff set
endmacro

macro set-dead
  // row-no col-no --

  get-id board 0 set
endmacro

macro draw-board
  0 while
    dup ROWS <
  do
    set-row-no

    0 while
      dup COLS <
    do
      set-col-no

      get-row-no get-col-no was-alive if "O" else "." end puts

      get-col-no inc
    end drop

    "\n" puts

    get-row-no
  inc end drop
endmacro

macro reset-board
  0 while
    dup ROWS <
  do
    "\xc2\x8d" puts
  inc end drop
endmacro

macro check-neighbor
  // row-no col-no

  was-alive if
    count count load8 inc store8
  end
endmacro

macro copy-board
  board CELLS old memcpy
endmacro

macro count-neighbors
  count 0 store8

  // north
  get-row-no inc
  get-col-no
  check-neighbor
  
  // north east
  get-row-no inc
  get-col-no inc
  check-neighbor
  
  // east
  get-row-no
  get-col-no inc
  check-neighbor
  
  // south east
  get-row-no dec
  get-col-no inc
  check-neighbor
  
  // south
  get-row-no dec
  get-col-no 
  check-neighbor
  
  // south west
  get-row-no dec
  get-col-no dec
  check-neighbor
  
  // west
  get-row-no
  get-col-no dec
  check-neighbor
  
  // north west
  get-row-no inc
  get-col-no dec
  check-neighbor
endmacro

macro update-cell
  count-neighbors

  get-row-no get-col-no was-alive if
    // If the cell is alive
    // Requires 2 or 3 neighbors to keep being alive

    count load8 2 < if
      get-row-no get-col-no set-dead
    else
      count load8 3 > if
	get-row-no get-col-no set-dead
      end
    end

  else
    // If the cell is dead
    // Requires 3 neighbors to born

    count load8 3 = if
      get-row-no get-col-no set-alive
    end
  end
endmacro

macro update-board
  0 while
    dup ROWS <
  do
    set-row-no

    0 while
      dup COLS <
    do
      set-col-no
       
      update-cell

      get-col-no inc
    end drop

    get-row-no inc
  end drop

  copy-board
endmacro

proc main
  -- int
in
  0 50000000 set-nanosleep-time

  4 10 set-alive
  5 11 set-alive
  6 9 set-alive
  6 10 set-alive
  6 11 set-alive
  copy-board

  "\n" puts

  draw-board

  while
    true
  do
    update-board
    reset-board
    draw-board
    nanosleep
  end

  0
end
