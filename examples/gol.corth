/*

    ==============================
    ==== Game of Life example ====
    ==============================

Simulates and renders game of life.
Requires a console that can handle the reverse line feed character.

ROWS and COLS can be changed to make the board bigger or smaller.

NOTE: There is a bug that if ROWS and COLS are not divisible by each other, algorithm acts weird.
*/

include libs/linux_x86/io.corth
include libs/memory.corth

macro ROWS 16 endmacro
macro COLS 16 endmacro
macro CELLS ROWS COLS * endmacro

macro DEAD  0x00 endmacro
macro ALIVE 0xff endmacro

memory board CELLS end
memory old CELLS end

memory count sizeof(int) end

macro get-id
  // int: row-no int: col-no -- int: (r * COLS + c)

  COLS % swp ROWS % COLS * +
endmacro

macro was-alive
  // int: row-no int: col-no -- bool: is-alive

  get-id old get isn-zero
endmacro

macro set-alive
  // int: row-no int: col-no --

  get-id board ALIVE set
endmacro

macro set-dead
  // int: row-no int: col-no --

  get-id board DEAD set
endmacro

macro draw-board
  0 while dup ROWS < do
    let row-no in
      0 while
	dup COLS <
      do
        let col-no in
	  row-no col-no was-alive if "()" else ".." end puts

	  col-no
	end
      inc end drop

      "\n" puts

      row-no
    end
  inc end drop
endmacro

macro reset-board
  0 while dup ROWS < do
    "\xc2\x8d" puts
  inc end drop
endmacro

macro check-neighbor
  // int: row-no int: col-no

  was-alive if
    count @64 inc count !64
  end
endmacro

macro clear-board
  board CELLS DEAD memset8
endmacro

macro copy-board
  board CELLS old memcpy8
endmacro

macro update-board
  0 while
    dup ROWS <
  do
    let row-no in
      0 while
	dup COLS <
      do
        let col-no in
	  0 count !64

	  // north
	  row-no inc col-no
	  check-neighbor

	  // north east
	  row-no inc col-no inc
	  check-neighbor

	  // east
	  row-no col-no inc
	  check-neighbor

	  // south east
	  row-no dec col-no inc
	  check-neighbor

	  // south
	  row-no dec col-no 
	  check-neighbor

	  // south west
	  row-no dec col-no dec
	  check-neighbor

	  // west
	  row-no col-no dec
	  check-neighbor

	  // north west
	  row-no inc col-no dec
	  check-neighbor

	  row-no col-no was-alive if
	    // If the cell is alive
	    // Requires 2 or 3 neighbors to keep being alive

	    count @64 2 < if
	      row-no col-no set-dead
	    else
	      count @64 3 > if
		row-no col-no set-dead
	      end
	    end

	  else
	    // If the cell is dead
	    // Requires 3 neighbors to born

	    count @64 3 = if
	      row-no col-no set-alive
	    end
	  end

	  col-no
	end
      inc end drop

      row-no
    end
  inc end drop

  copy-board
endmacro

proc main
  -- int
in
  0 50000000 set-nanosleep-time

  clear-board
  
  4 10 set-alive
  5 11 set-alive
  6 9  set-alive
  6 10 set-alive
  6 11 set-alive
  copy-board

  "\n" puts

  draw-board

  while true do
    update-board
    reset-board
    draw-board
    nanosleep
  end

  3
  2 > if
    1
  else
    2
  end drop
  
0 end
