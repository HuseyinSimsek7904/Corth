include libs/linux_x86/sys.corth
include libs/memory.corth
include libs/core.corth
include libs/str.corth

//    ================
//    ==== Output ====
//    ================


// == Strings ==
macro fputs arot SYSWRITE syscall3 drop endmacro // ptr: str-ptr int: str-len file-desc: file-desc

// == Unsigned decimals ==
proc fputu
  // int: int file-desc: file-desc 
  int file-desc --
in
  let file in
    memory buffer 20          and
           value  sizeof(int) and
           i      sizeof(ptr) in
           
      value !64
      buffer 19 + i !64

      while
        value @64 10 /%
        int-to-dec-digit i @64 !8
        i @64 dec i !64
        dup value !64 0 !=
      do end

      i @64 inc buffer 19 + i @64 - file fputs
    end
  end
end

// == Signed decimals ==
macro fputi
  // int: int file-desc: file-desc 
  let file in
    dup is-neg if
      neg
      "-" file fputs
    end
    file fputu
  end
endmacro

// == Hexadecimals ==
proc fputx
  // int: int file-desc: file-desc
  int file-desc --
in
  let file in
    memory char sizeof(char) in
      16 while dup 0 > do
        let x i in
          // Save the char
          x 0xf000000000000000 && 0x1000000000000000 / int-to-hex-digit char !8

          // Print the char
          char 1 file fputs
          
          x 16 * i dec
        end
      end drop drop
    end
  end
end

// == Unsigned decimals (plus) ==
// The starting characters are always visible and the ending zeros are removed
// Also, does not print the first character if it is not 0
// Used in fixed64.put-fixed
proc fputup
  // int: int file-desc: file-desc 
  int int --
in
  let file in
    dup is-zero if
      drop "0" file fputs
    else
      memory value         sizeof(int) and
             end-of-buffer sizeof(int) and
             buffer        20          in
             
        value !64
        
        buffer 20 + while dec value @64 10 % is-zero do
          value @64 10 / value !64
        end

        dup end-of-buffer !64

        while dup buffer >= do
          let i in
            value @64 10 /%
            int-to-dec-digit i !8
            value !64
          i end
        dec end drop

        buffer inc end-of-buffer @64 buffer - file fputs
      end
    end
  end
end

//  ===============
//  ==== Input ====
//  ===============

// == Strings ==
// Read bytes can be used to check if the reading operation was successful or not
macro fgets
  // ptr: str-ptr int: str-len file-desc: file-desc -- int: read-bytes 
  
  arot SYSREAD syscall3
endmacro

// == Unsigned decimals ==
// 20 bytes are read, since the longest unsigned integer is 20 digits in decimal
proc fgetu
  // files-desc: file-desc -- int: read
  file-desc -- int
in
  let file in
    memory buffer 21 in
      buffer 21 file fgets dec buffer swp str.dec-to-int
    end
  end
end

// == Signed decimals ==
// 20 bytes are read, since the least negative number is 19 digits in decimal and requires a minus
proc fgeti
  // file-desc: file-desc -- int: read
  file-desc -- int
in
  let file in
    memory buffer 21 in
      buffer 21 file fgets dec
      
      buffer @8 '-' = if
        dec buffer inc swp str.dec-to-int neg
      else
        buffer swp str.dec-to-int
      end 
    end
  end
end

macro  puts  STDOUT fputs  endmacro  // ptr: str-ptr int: str-len
macro eputs  STDERR fputs  endmacro  // ptr: str-ptr int: str-len
macro  putu  STDOUT fputu  endmacro  // int: int
macro eputu  STDERR fputu  endmacro  // int: int
macro  puti  STDOUT fputi  endmacro  // int: int
macro eputi  STDERR fputi  endmacro  // int: int
macro  putx  STDOUT fputx  endmacro  // int: int
macro eputx  STDERR fputx  endmacro  // int: int
macro  putup STDOUT fputup endmacro  // int: int
macro eputup STDERR fputup endmacro  // int: int

macro  gets  STDIN  fgets  endmacro  // ptr: str-ptr int: str-len
macro  getu  STDIN  fgetu  endmacro  // 
macro  geti  STDIN  fgeti  endmacro  // 
