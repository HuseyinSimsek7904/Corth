// io.corth

include libs/core.corth
include libs/sys.corth
include libs/memory.corth


//    ================
//    ==== Output ====
//    ================


// == Strings ==
macro fputs
    // file-dc str-ptr str-len
    
    SYSWRITE syscall3 drop
endmacro

macro puts
    // str-ptr str-len
    
    STDOUT rot rot fputs
endmacro

macro eputs
    // str-ptr str-len
    
    STDERR rot rot fputs
endmacro


// == C-like strings ==
macro fputsc
     // file-dc str-ptr
     
     while
         dup load 0 !=
     do
         dup rot dup rot 1 fputs swp
         inc
     end
     
     drop drop
endmacro

macro putsc
    // str-ptr
    
    STDOUT swp fputsc
endmacro

macro eputsc
    // str-ptr
    
    STDERR swp fputsc
endmacro


// == Unsigned decimals ==
proc fputu
    // file-dc int
    int int --
in
    memory buffer 20 sizeof(char) * end
    
    buffer 20 +

    while
        swp 10 /% '0' +
        rot
        dec dup
        rot
        store
        swp dup
        rot swp
        0 !=
    do end

    dup buffer
    swp - 20 +
    fputs drop
end

macro putu
    STDOUT swp fputu
endmacro

macro eputu
    STDERR swp fputu
endmacro

// == Signed decimals ==
macro fputi
    // int: file-dc int: int

    dup 0x7fffffffffffffff > if
        neg swp dup "-" fputs swp fputu
    else
        fputu
    end
endmacro

macro puti
    STDOUT swp fputi
endmacro

macro eputi
    STDERR swp fputi
endmacro

//    ===============
//    ==== Input ====
//    ===============

// == Strings ==
macro fgets
    // file-dc str-ptr str-len
    
    SYSREAD syscall3 drop
endmacro

macro gets
    // str-ptr str-len
    
    STDIN rot rot fgets
endmacro


// == Lines ==
// This algorithm is unsafe and should not be used
macro fgetl
    // file-dc str-ptr -- str-len
    
    // fd st -> st fd st+0
    dup rot swp

    while
        // st fd (st+l) -> st fd (st+l) fd (st+l)
        swp dup rot dup rot swp

        1 fgets
        // st fd (st+l)

        dup load dup
        // st fd (st+l) ch ch
       
        '\n' !=
        // st fd (st+l) ch bool
    do
        dup 0 = if
	    break
	end

        drop
        
        // st fd (st+l)
        inc
        // st fd (st+l+1)
    end
    
    drop

    // st fd (st+n) -> st fd (st+n) (st+n) 0
    dup 0 store

    // st fd (st+n) -> n fd
    rot - swp

    drop
endmacro

macro getl
    // str-ptr -- str-len
    STDIN swp fgetl
endmacro
