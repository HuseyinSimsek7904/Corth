include libs/core/memory.corth
include libs/dynamic/utils.corth
include libs/collections/array64.corth

// string-builder is not designed to have a long life, unlike a list.
// This library requires malloc.

macro string-builder.RESIZING 64 endmacro

macro string-builder.init let _builder.array_ _builder.ptr_ in
  // int: start-size ptr: builder.array ptr: builder.ptr --
  // Start size is the capacity the dynamic object has when the object is created.
  // Save the dynamic object to a variable and use that variable address as the list object.
  malloc dup _builder.array_ !64 _builder.ptr_ !64
end endmacro

macro string-builder.to-string let _builder.array_ _builder.ptr_ in
  // ptr: builder.array ptr: builder.ptr -- ptr: string
  _builder.array_ @64 _builder.ptr_ @64 _builder.array_ @64 - to-dynamic8
end endmacro

macro string-builder.length let _builder.array_ _builder.ptr_ in
  // ptr: builder.array ptr: builder.ptr -- int: length
  _builder.ptr_ @64 _builder.array_ @64 -
end endmacro

macro string-builder.avail let _builder.array_ _builder.ptr_ in
  // ptr: builder.array ptr: builder.ptr -- int: avail
  // Returns the number of indexes available on the builder without any resizing.
  _builder.array_ @64 mlength _builder.ptr_ @64 _builder.array_ - -
end endmacro

proc string-builder.inc-capacity
  // int: extend ptr: builder.array ptr: builder.ptr --
 int ptr ptr --
  // NOTE: If a problem with mfree occurs, it is ignored. This behavior should be changed in the future.
in let extend builder.array builder.ptr in
  builder.array @64 let old-dynamic in
    // resize and save the dynamic object.
    old-dynamic old-dynamic mlength extend + dresize-up builder.array !64

    // Update builder.ptr.
    builder.ptr @64 old-dynamic - builder.array @64 + builder.ptr !64

    // Free the old dynamic resources.
    old-dynamic mfree drop
  end
end end

proc string-builder.check-capacity
  // int: length ptr: builder.array ptr: builder.ptr -
  int ptr ptr --
  // Length is the expected available length.
in let length builder.array builder.ptr in
  length builder.array @64 mlength builder.array builder.ptr string-builder.length - - let avail in
    avail is-pos if
      avail string-builder.RESIZING upper-base builder.array builder.ptr string-builder.inc-capacity
    end
  end
end end

proc string-builder.append-char
  // int: value ptr: builder.array ptr: builder.ptr --
  int ptr ptr --
in let value builder.array builder.ptr in
  // Check if the list has enough capacity.
  1 builder.array builder.ptr string-builder.check-capacity

  // Set value.
  value builder.ptr @64 !8

  // Shift the pointer
  builder.ptr @inc64
end end

proc string-builder.append-str
  // ptr: array int: length ptr: builder.array ptr: builder.ptr --
  ptr int ptr ptr --
in let array length builder.array builder.ptr in
  // Check if the list has enough capacity.
  length builder.array builder.ptr string-builder.check-capacity

  // Set value.
  array builder.ptr @64 length memcpy8

  // Shift the pointer
  builder.ptr @64 length + builder.ptr !64
end end

// cstr: string ptr: builder.array ptr: builder.ptr --
macro string-builder.append-cstr let _builder.array_ _builder.ptr_ in
  dup cstr.len _builder.array_ _builder.ptr_ string-builder.append-str
end endmacro
