include libs/core/stack.corth
include libs/core/memory.corth


proc convx
  // ptr: start int: length ptr: address -- bool: correct
  ptr int ptr -- bool
  // Converts a character array of hexadecimal number to an integer.
  // NOTE: If the number is too big, the result will be wrong.
in let start length number in
  start while dup start length + < do let i in
    i @8 is-ddigit if
      i @8 '0'
    else i @8 is-xeldigit if
      i @8 'W'
    else i @8 is-xeudigit if
      i @8 '7'
    else
      false return
    end end end
    - number @64 16 * + number !64
  i end inc end drop
end true end

proc convud
  // ptr: start int: length ptr: address -- bool: correct
  ptr int ptr -- bool
  // Converts a character array of unsigned decimal number to an integer.
  // NOTE: If the number is too big, the result will be wrong.
in let start length number in
  start while dup start length + < do let i in
    i @8 isn-ddigit if
      false return
    end

    i @8 ddigit-to-int number @64 10 * + number !64
  i end inc end drop
end true end

macro convd
  // ptr: start int: length ptr: address -- bool: correct
  // Converts a character array of decimal number to an integer.
  // NOTE: If the number is too big, the result will be wrong.
  let _start_ _length_ _number_ in
    _start_ @8 '-' = if
      _start_ inc _length_ dec _number_ convud dup isn-zero if _number_ @64 neg _number_ !64 end isn-zero
    else
      _start_ _length_ _number_ convud
    end
  end
endmacro

proc convo
  // ptr: start int: length ptr: address -- bool: correct
  ptr int ptr -- bool
  // Converts a character array of octal number to an integer.
  // NOTE: If the number is too big, the result will be wrong.
in let start length number in
  start while dup start length + < do let i in
    i @8 isn-odigit if
      false return
    end

    i @8 ddigit-to-int number @64 8 * + number !64
  i end inc end drop
end true end

proc convb
  // ptr: start int: length ptr: address -- bool: correct
  ptr int ptr -- bool
  // Converts a character array of binary number to an integer.
  // NOTE: If the number is too big, the result will be wrong.
in let start length number in
  start while dup start length + < do let i in
    i @8 '0' = if
      number @64 2 *
    else i @8 '1' = if
      number @64 2 * inc
    else
      false return
    end end
    
    number !64
  i end inc end drop
end true end

proc convuint
  // ptr: start int: length ptr: address -- bool: correct
  ptr int ptr -- bool
  // Converts a character array of any base (binary, octal, unsigned decimal, hexadecimal) to an integer.
  // NOTE: For the number to be considered a different base, it must start with a '0' character and one of the base characters ('b', 'o' or 'x').
  // NOTE: If the number is too big, the result will be wrong.
in let start length number in
  length 3 < start @8 '0' != | if
    start length number convud
  else 
    start inc @8 let base in
      base 'x' = if
        start 2 + length 2 - number convx
      else base 'o' = if
        start 2 + length 2 - number convo
      else base 'b' = if
        start 2 + length 2 - number convb
      else
        start length number convud
      end end end
    end
  end
end end

proc convint
  // ptr: start int: length ptr: address -- bool: correct
  ptr int ptr -- bool
  // Converts a character array of any base (binary, octal, decimal, hexadecimal) to an integer.
  // NOTE: For the number to be considered a different base, it must start with a '0' character and one of the base characters ('b', 'o' or 'x').
  // NOTE: If the number is too big, the result will be wrong.
in let start length number in
  length 3 < start @8 '0' != | if
    start length number convd
  else 
    start inc @8 let base in
      base 'x' = if
        start 2 + length 2 - number convx
      else base 'o' = if
        start 2 + length 2 - number convo
      else base 'b' = if
        start 2 + length 2 - number convb
      else
        start length number convd
      end end end
    end
  end
end end
