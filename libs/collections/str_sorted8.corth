include libs/dynamic/malloc.corth

/*

  This library includes some algorithms that can be used for sorted dynamicly-placed byte collection (or string) arrays.

Requires dmemeq8 and dmemlt8.
*/

macro str-sorted8.available-dstr let address start end_ in
  address address mlength start end_ str-sorted8.available-str
end endmacro

macro str-sorted8.available-cstr let address start end_ in
  address address cstr.len start end_ str-sorted8.available-str
end endmacro

proc str-sorted8.available-str
  // ptr: address int: length ptr: start ptr: end -- ptr: lower-bound bool: found
  ptr int ptr ptr -- ptr bool
  // Finds where the value could be placed using binary search, so that the array could stay sorted.
  // Returns if the value was found in the array.
in
  memory lower sizeof(ptr) in
  memory upper sizeof(ptr) in

    upper !64
    lower !64

    lower @64 8 % let address length offset in
      while true do
        // Check if failed to find the value, if so, return false.
        lower @64 upper @64 = if
          lower @64 false return
        end

        lower @64 upper @64 avg2 offset - 8 lower-base offset + let middle in
          // Compare the two strings.
          middle @64 dup mlength address length memcmp8-wl let cmp in
            // Check if found the exact value, if so, return true.
            cmp is-zero if
              middle true return
            end

            // Move the end search points.
            cmp is-neg if
              middle 8 + lower !64
            else
              middle upper !64
            end
          end
        end
      end
    end
  end end
NULLPTR false end  // dummy return
