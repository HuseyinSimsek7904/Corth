include libs/core.corth
include libs/memory.corth

macro str.get-len
  // ptr: ptr int: len -- int: len
  swp drop
endmacro

macro strc.get-len
  // ptr: ptr -- int: len

  0 while
    swp dup @8 0 !=
  do
    inc swp
  inc end drop
endmacro

macro str.to-strc
  // ptr: ptr int: len -- ptr: ptr
  drop
endmacro

macro strc.to-str
  // ptr: ptr -- ptr: ptr int: len
  dup strc.get-len
endmacro

macro str.copy
  // ptr: src int: len ptr: dst
  memcpy
endmacro

proc str.dec-to-int
  // ptr: src int: len -- int: number
  // NOTE: If the number is too big, the result will be wrong
  ptr int -- int
in
  memory n sizeof(int) in
    0 n !64

    let src len in
      src while dup src - len < do
        dup @8 let i in
          i '9' > if
            NOT-A-DIGIT call-sys-exit
          end

          i '0' < if
            NOT-A-DIGIT call-sys-exit
          end

          i dec-digit-to-int n @64 10 * + n !64
        end
      inc end drop
    end

    n @64
  end
end

/*
ITS RECOMMENDED TO NOT USE THIS LIBRARY
THIS LIBRARY AND STRING TYPE REQUIRES A TON OF REWORK

There are two types of strings in Corth: char arrays and C-like strings.

char arrays:

  Stack:
    [cs] [cl]

  Memory:
    [c0] [c1] [c2] ... [c+cl]
     cs^

  cs points to the array pointer and right after it comes the length of the array.

C-like strings:

  Stack:
    [cs]

  Memory:
    [c0] [c1] [c2] ... [c+len] 00
     cs^

  cs points to the first char in the string and the last character is 0x00 (null-char).
*/
