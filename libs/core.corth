// Names starting with _ are usually supposed to not be used

macro ptr int endmacro

macro sizeof(ptr)  8 endmacro
macro sizeof(int)  8 endmacro
macro sizeof(bool) 8 endmacro
macro sizeof(char) 1 endmacro

macro MAX-INT  0x7fffffffffffffff endmacro
macro MIN-INT  0x8000000000000000 endmacro
macro MAX-UINT 0xffffffffffffffff endmacro
macro MIN-UINT 0x0000000000000000 endmacro

macro NOT-A-DIGIT   0x0000000000000001 endmacro
macro INPUT-TOO-BIG 0x0000000000000002 endmacro

// int: x -- bool: result
macro is-pos   0 >  endmacro
macro is-zero  0 =  endmacro
macro is-neg   0 <  endmacro
macro isn-pos  0 <= endmacro
macro isn-zero 0 != endmacro
macro isn-neg  0 >= endmacro

macro is-even 2 % is-zero  endmacro
macro is-odd  2 % isn-zero endmacro


// int: x -- int: result
macro neg    !! inc                endmacro
macro abs    dup is-neg if neg end endmacro
macro iabs   dup is-pos if neg end endmacro
macro sqr    dup *                 endmacro
macro usqr   dup u*                endmacro

macro int-to-dec-digit '0' +                         endmacro
macro int-to-hex-digit dup 9 > if 'W' else '0' end + endmacro

macro dec-digit-to-int '0' -                         endmacro

// Macros below use let, with variable names _a_, _b_, _c_ and _d_. Avoid using those names if going to use those macros.
// (I mean, what kind of a person uses a variable name like that already but whatever)

macro drop  let _a_             in                 end endmacro
macro dropd let _a_ _b_         in                 end endmacro
macro dup   let _a_             in _a_ _a_         end endmacro
macro dupd  let _a_ _b_         in _a_ _b_ _a_ _b_ end endmacro
macro swp   let _a_ _b_         in _b_ _a_         end endmacro
macro swpd  let _a_ _b_ _c_ _d_ in _c_ _d_ _a_ _b_ end endmacro
macro rot   let _a_ _b_ _c_     in _b_ _c_ _a_     end endmacro
macro arot  let _a_ _b_ _c_     in _c_ _a_ _b_     end endmacro
macro rot4  let _a_ _b_ _c_ _d_ in _b_ _c_ _d_ _a_ end endmacro
macro arot4 let _a_ _b_ _c_ _d_ in _d_ _a_ _b_ _c_ end endmacro

macro min2
  // int: x int: y -- int: min(x, y)
  let _a_ _b_ in
    _a_ _b_ < if _a_ else _b_ end
  end
endmacro

macro min3
  // int: x int: y int: z -- int: min(x, y, z)
  let _a_ _b_ _c_ in
    _a_ _b_ < if
      _a_ _c_ < if _a_ else _c_ end
    else
      _b_ _c_ < if _b_ else _c_ end
    end
  end
endmacro

macro max2
  // int: x int: y -- int: min(x, y)
  let _a_ _b_ in
    _a_ _b_ > if _a_ else _b_ end
  end
endmacro

macro max3
  // int: x int: y int: z -- int: min(x, y, z)
  let _a_ _b_ _c_ in
    _a_ _b_ > if
      _a_ _c_ > if _a_ else _c_ end
    else
      _b_ _c_ > if _b_ else _c_ end
    end
  end
endmacro

macro sort2
  // int: x int: y -- int: min(x, y) int: max(x, y)
  let _a_ _b_ in
    _a_ _b_ < if
      _a_ _b_
    else
      _b_ _a_
    end
  end
endmacro

// Sorts from least to greatest
// If there was just a tiny amount of optimization, could write this using sort2
// But here we are making a 38 line sorting algoritm
macro sort3
  // int: x int: y int: z -- int: min(x, y, z) int: mid(x, y, z) int: max(x, y, z)
  let _a_ _b_ _c_ in
    _a_ _b_ < if
      // x < y
      _a_ _c_ < if
        // x < z
        _a_
        _b_ _c_ < if
          // y < z
          _b_ _c_
        else
          // z < y
          _c_ _b_
        end
      else
        // z < x
        _c_ _a_ _b_
      end
    else
      // y < x
      _a_ _c_ < if
        // x < z
        _b_ _a_ _c_
      else
        // z < x
        _b_ _c_ < if
          // y < z
          _b_ _c_
        else
          // z < y
          _c_ _b_
        end _a_
      end
    end
  end
endmacro

// Because of the integer limit, can return wrong results for big numbers.
macro perm
  // int: x int: y -- int: P(x, y)
  // P(a, b) = a! / (a-b)! = (a-b) * (a-b+1) * (a-b+2) * ... * (a-1) * a = mul-bet(a-b, a)
  // NOTE: x >= y must be satisfied.
  let _a_ _b_ in
    _a_ _b_ - inc _a_ mul-bet
  end
endmacro

// Because of the integer limit, can return wrong results for big numbers.
// C(28, n) can be calculated without any problem, but any bigger number may start to cause problems.
macro comb
  // int: x int: y -- int: C(x, y)
  // C(a, b) = a! / (b! * (a - b)!) = P(a, b) / b! = P(a, a-b) / (a-b)!
  // y and x-y are sorted, since if c in P(n, c) is bigger, it is faster to calculate it.
  // NOTE: x >= y must be satisfied.
  let _a_ _b_ in 
    _b_ _a_ _b_ - < if
      // b < (a - b)
      // C(a, b) = mul-bet(a-b, a) / b!
      _a_ _b_ - inc _a_ mul-bet 2 _b_ mul-bet /
    else
      // b > (a - b)
      // C(a, b) = mul-bet(b, a) / (a-b)!
      _b_ inc _a_ mul-bet 2 _a_ _b_ - mul-bet /
    end
  end
endmacro

// Cool stuff

// Pretty sure that gcd and lcm would work for fixed64 as well, not tested yet though.
proc gcd
  // int: x int: y -- int: gcd(x, y)
  // NOTE: x < y must be already satisfied otherwise will go in an infinite recursion loop.
  int int -- int
in
  let x y in
    x 0 = if
      y
    else
      // y%x < x is always true, so no need to sort again.
      y x % x gcd
    end
  end
end

macro lcm
  // int: x int: y -- int: lcd(x, y)
  // lcm(x, y) * gcd(x, y) = x * y
  // lcm(x, y) = x * y / gcd(x, y)
  dupd gcd / *
endmacro

proc mul-bet
  // int: x int: y -- int: x * (x+1) * (x+2) * ... * (y-1) * y
  // For x <= y, multiplies the numbers between (including) x and y.
  // For y > x, returns 1.
  // NOTE: For big numbers, the result can lose its precission, because of the integer size limit.
  int int -- int
in
  let y in
    memory m sizeof(int) in
      1 m !64
      while dup y <= do
        dup m @64 * m !64
      inc end drop
      m @64
    end
  end
end

// Because of the integer limit, the biggest number whose factorial can be calculated without any problem is 20
macro fact
  // int: x -- int: x!
  // x! = 1 * 2 * 3 * ... * (x-1) * x = mul-bet(2, x)
  2 swp mul-bet
endmacro

proc ipow
  // int: x uint: c -- int: x^c
  // Calculates integer exponents
  int int -- int
in
  memory result sizeof(int) and
         frag   sizeof(int) and
         exp    sizeof(int) in
    exp      !64     
    frag     !64
    1 result !64

    while exp @64 isn-zero do
      exp @64 is-odd if
        result @64 frag @64 * result !64
      end

      frag @64 sqr frag !64
      exp @64 2 u/ exp !64
    end

    result @64
  end
end

proc upow
  // uint: x uint: c -- uint: x^c
  // Calculates unsigned integer exponents
  int int -- int
in
  memory result sizeof(int) and
         frag   sizeof(int) and
         exp    sizeof(int) in
    exp      !64     
    frag     !64
    1 result !64

    while exp @64 isn-zero do
      exp @64 is-odd if
        result @64 frag @64 u* result !64
      end

      frag @64 usqr frag !64
      exp @64 2 u/ exp !64
    end

    result @64
  end
end
