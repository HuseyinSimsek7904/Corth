include libs/core/memory.corth
include libs/core/ptr.corth

// ptr: cstr -- int: len
macro cstr.len
  let _src_ in
    _src_ while dup @8 isn-zero do inc end _src_ -
  end
endmacro

// ptr: cstr -- ptr: str-ptr int: str-len
macro cstr.str
  dup cstr.len
endmacro

proc cstr.cmp
  // ptr: a-src ptr: b-src -- int: cmp(a, b)
  ptr ptr -- int
  // Returns <0 if a<b.
  // Returns  0 if a=b.
  // Returns >0 if a>b.
in
  memory ap sizeof(ptr) in
  memory bp sizeof(ptr) in
  
    bp !64 ap !64

    while ap @64 @8 isn-zero do
      ap @64 @8 bp @64 @8 - let cmp in
        cmp isn-zero if cmp return end
      end
      
      ap @inc64
      bp @inc64
    end

    bp @64 @8
  end end 
end
