include "core/arithmetic.corth"


// Because of the integer limit, can return wrong results for big numbers.
macro perm
  // int: x int: y -> int: P(x, y)
  // P(a, b) = a! / (a-b)! = (a-b) * (a-b+1) * (a-b+2) * ... * (a-1) * a = mul-bet(a-b, a)
  // NOTE: x >= y must be satisfied.
  dupi - inc mul-bet
endmacro


// Because of the integer limit, can return wrong results for big numbers.
// C(28, n) can be calculated without any problem, but any bigger number may start to cause problems.
macro comb let _a_ _b_ in
  // int: x int: y -> int: C(x, y)
  // C(a, b) = a! / (b! * (a - b)!) = P(a, b) / b! = P(a, a-b) / (a-b)!
  // y and x-y are sorted, since if c in P(n, c) is bigger, it is faster to calculate it.
  // NOTE: x >= y must be satisfied.

  _b_ _a_ _b_ - < if
    // b < (a - b)
    // C(a, b) = mul-bet(a-b, a) / b!
    _a_ _b_ - inc _a_ mul-bet 2 _b_ mul-bet /
  else
    // b > (a - b)
    // C(a, b) = mul-bet(b, a) / (a-b)!
    _b_ inc _a_ mul-bet 2 _a_ _b_ - mul-bet /
  end
end endmacro


proc gcd
  // int:     x int:     y -> int:     gcd(x, y)
  // fixed64: x fixed64: y -> fixed64: gcd(x, y)
  int int -> int
  // NOTE: x < y must be already satisfied otherwise will go in an infinite recursion loop.
in
  while true do
    let x y in
      x is-zero if
        y return
      end

      y x % x
    end
  end
drop end // dummy return


macro lcm
  // int:     x int:     y -> int:     lcm(x, y)
  // fixed64: x fixed64: y -> fixed64: lcm(x, y)
  // lcm(x, y) * gcd(x, y) = x * y
  // lcm(x, y) = x * y / gcd(x, y)
  dupd gcd / *
endmacro


proc mul-bet
  // int: x int: y -> int: x * (x+1) * (x+2) * ... * (y-1) * y
  int int -> int
  // For x <= y, multiplies the numbers between (including) x and y.
  // For y > x, returns 1.
  // NOTE: For big numbers, the result can lose its precission, because of the integer size limit.
in let y in
  memory m sizeof(int) in
    1 m !64
    while dup y <= do
      dup m @64 * m !64
    inc end drop
    m @64
  end
end end


// Because of the integer limit, the biggest number whose factorial can be calculated without any problem is 20.
macro fact
  // int: x -> int: x!
  // x! = 1 * 2 * 3 * ... * (x-1) * x = mul-bet(2, x)
  2 swp mul-bet
endmacro


proc ipow
  // int: x uint: c -> int: x^c
  int uint -> int
  // Calculates integer exponents.
in
  memory result sizeof(int) in
  memory frag   sizeof(int) in
  memory exp    sizeof(int) in

    exp      !64
    frag     !64
    1 result !64

    while exp @64 isn-zero do
      exp @64 is-odd if
        result @64 frag @64 * result !64
      end

      frag @64 sqr frag !64
      exp @64 2 u/ exp !64
    end

    result @64
  end end end
end


proc upow
  // uint: x uint: c -> uint: x^c
  uint uint -> int
  // Calculates unsigned integer exponents.
in
  memory result sizeof(int) in
  memory frag   sizeof(int) in
  memory exp    sizeof(int) in

    exp      !64
    frag     !64
    1 result !64

    while exp @64 isn-zero do
      exp @64 is-odd if
        result @64 frag @64 u* result !64
      end

      frag @64 usqr frag !64
      exp @64 2 u/ exp !64
    end

    result @64
  end end end
end
