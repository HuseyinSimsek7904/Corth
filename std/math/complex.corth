/*
  Complex numbers for Corth

Complex numbers are implemented as:

  comp = (fixed: real-part fixed: imag-part)

This number represents the number, C = R + I * i

NOTE: There is no such a thing as 'unsigned complex number', since most results require a negative result already.
NOTE: Unless it is said to be otherwise, all fixed numbers are signed.

*/

include "math/fixed64.corth"

macro comp         fixed64 fixed64 endmacro
macro sizeof(comp) 16              endmacro

macro load-complex
  // ptr: address
  dup @64 swp 8 + @64
endmacro

macro store-complex
  // comp: x ptr: address
  let xr xi addr in
    xr addr     !64
    xi addr 8 + !64
  end
endmacro

// COMPLEX -> FIXED macro and procedures
macro lengths-c
  // comp: x -> fixed64: length(x)
  sqr-f swp sqr-f +
endmacro


// COMPLEX -> COMPLEX macro and procedures
macro neg-c
  // comp: x -> comp: -x
  let xr xi in
    xr neg
    xi neg
  end
endmacro

macro inv-c
  // comp: x -> comp: 1/x
  // NOTE: Even though length-c returns unsigned fixed, it is used like it is signed. Because of that, it may return a wrong result for very big complex numbers
  // 1 / (a + bi) = (a - bi) / (a^2 + b^2) = div-cf(conj-c(x), lengths-c(x))
  let xr xi in
    xr xi neg
    xr sqr-f xi sqr-f +
    div-fc
  end
endmacro

macro conj-c
  // comp: x -> comp: conj(x)
  // Conjugate of a complex number a + bi is a - bi
  neg
endmacro

proc sqr-c
  // comp: x -> comp: x^2
  comp -> comp
in
  let xr xi in
    // Real part
    xr sqr-f
    xi sqr-f -

    // Imaginary part
    xr xi mul-ff 2 *
  end
end


// COMPLEX COMPLEX -> COMPLEX macro and procedures
macro add-cc
  // comp: a comp: b -> comp: a+b
  let ar ai br bi in
    ar br +
    ai bi +
  end
endmacro

macro sub-cc
  // comp: a comp: b -> comp: a-b
  let ar ai br bi in
    ar br +
    ai bi +
  end
endmacro

proc mul-cc
  // comp: a comp: b -> comp: a*b
  comp comp -> comp
in
  let ar ai br bi in
    // Real part
    // (ar * br - ai * bi)
    ar br mul-ff
    ai bi mul-ff -

    // Imaginary part
    // (ar * bi + ai * br)
    ar bi mul-ff
    ai br mul-ff +
  end
end

macro div-cc
  // comp: a comp: b -> comp: a/b
  // a / b = a * (1/b) = mul-cc(a, inv-c(b))

  // (a + bi) / (c + di) = (a + bi) * (c - di) / (c^2 + d^2) = ((ac + bd) + (bc - ad)i) / (c^2 + d^2)
  inv-c mul-cc
endmacro


// COMPLEX FIXED -> COMPLEX macro and procedures
// NOTE: fixed argument is used as a real number
macro add-cf
  // comp: a fixed64: b -> comp: a+b
  let xr xi f in
    xr f +
    xi
  end
endmacro

macro sub-cf
  // comp: a fixed64: b -> comp: a-b
  let xr xi f in
    xr f -
    xi
  end
endmacro

macro mul-cf
  // comp: a fixed64: b -> comp: a*b
  let xr xi f in
    xr f mul-ff
    xi f mul-ff
  end
endmacro

macro div-cf
  // comp: a fixed64: b -> comp: a*b
  let xr xi f in
    xr f div-ff
    xi f div-ff
  end
endmacro


// This macro uses the putu, putu-plus and puts from the io.corth library
// Because of that, to use this macro, io.corth should already be included or putu, putu-plus and puts should be defined
macro fput-complex
  // comp: x file-desc: file
  let xr xi file in
    // Real part
    xr file fput-fixed64

    // Imaginary part
    xi xi is-neg if
      neg " - "
    else
      " + "
    end

    file fputs
    file fput-fixed64
    "i" file fputs
  end
endmacro

macro put-complex  STDOUT fput-complex endmacro  // comp: comp
macro eput-complex STDERR fput-complex endmacro  // comp: comp
