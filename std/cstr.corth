include "core/memory.corth"
include "core/ptr.corth"

namespace cstr

// ptr: cstr -> bool: is-empty
macro is-empty
  @8 '\0' =
endmacro

// ptr: cstr -> bool: isn-empty
macro isn-empty
  @8 '\0' !=
endmacro

// ptr: cstr -> int: len
macro len
  let _src_ in
    _src_ while dup @8 isn-zero do inc end _src_ -
  end
endmacro

// ptr: cstr -> ptr: str-ptr int: str-len
macro str
  dup cstr:len
endmacro

// ptr: cstr -> ptr: copy
macro to-dynamic
  dup cstr:len to-dynamic8
endmacro

// ptr: cstr -> ptr: copy
macro to-dynamic-termed
  dup cstr:len inc to-dynamic8
endmacro

proc cmp
  // ptr: a-src ptr: b-src -> int: cmp(a, b)
  ptr ptr -> int
  // Returns <0 if a<b.
  // Returns  0 if a=b.
  // Returns >0 if a>b.
in
  memory ap sizeof(ptr) in
  memory bp sizeof(ptr) in

    bp !64 ap !64

    while ap @64 @8 isn-zero do
      ap @64 @8 bp @64 @8 - let cmp in
        cmp isn-zero if cmp return end
      end

      ap @inc64
      bp @inc64
    end

    bp @64 @8
  end end
end

endnamespace
