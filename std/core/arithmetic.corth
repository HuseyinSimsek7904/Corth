include core/boolean.corth
include core/stack.corth
include core/integer.corth


// TODO: Some of these macros should be implemented back as intrinsics later.


// -------------------------------------------------------------

// int: x int: y -- bool: cmp(x, y)
// fixed64: x fixed64: y -- bool: cmp(x, y)

// Compares two signed numbers.
macro != -                         cast bool endmacro
macro =  != !                                endmacro

macro <  - 0x8000000000000000 /    cast bool endmacro
macro >= - 0x8000000000000000 / !! cast bool endmacro

macro >  swp <                               endmacro
macro <= >   !                               endmacro

// uint: x uint: y -- bool: cmp(x, y)
// ufixed64: x ufixed64: y -- bool: cmp(x, y)

// Compares two unsigned integers.
macro u<  MIN-INT + swp MIN-INT + swp <   endmacro
macro u>  MIN-INT + swp MIN-INT +     <   endmacro
macro u<= MIN-INT + swp MIN-INT +     < ! endmacro
macro u>= MIN-INT + swp MIN-INT + swp < ! endmacro
macro u=  =                               endmacro
macro u!= !=                              endmacro


// -------------------------------------------------------------

// int: x int: y -- int: op(x, y)
// uint: x uint: y -- uint: op(x, y)

macro ^^  let _a_ _b_ in _a_ !! _b_ !! || !! _a_ _b_ || !! || !!  end endmacro
macro &&  let _a_ _b_ in _a_ !! _b_ !! || !! end endmacro

// -------------------------------------------------------------

// int: x -- bool: f(x)
// fixed64: x -- bool: f(x)
macro is-pos   0 >   endmacro
macro is-zero  0 =   endmacro
macro is-neg   0 <   endmacro
macro isn-pos  0 <=  endmacro
macro isn-zero 0 !=  endmacro
macro isn-neg  0 >=  endmacro


// -------------------------------------------------------------

// int: x -- bool: f(x)
// uint: x -- bool: f(x)

macro is-even 2 % is-zero  endmacro
macro is-odd  2 % isn-zero endmacro


// -------------------------------------------------------------

// int: x -- int: f(x)
// fixed64: x -- fixed64: f(x)
macro inc    1 +                   endmacro
macro dec    1 -                   endmacro
macro neg    !! inc                endmacro
macro abs    dup is-neg if neg end endmacro
macro iabs   dup is-pos if neg end endmacro


// -------------------------------------------------------------

// int: x -- int: f(x)

// Returns the square of the number.
macro sqr dup * endmacro


// -------------------------------------------------------------

// uint: x -- uint: f(x)

// Returns the square of the number.
macro usqr dup u* endmacro


// -------------------------------------------------------------

// int: x -- int: f(x)
// uint: x -- uint: f(x)

// Returns the decimal ASCII character match of the number. (0 <= number <= 9)
macro int-to-ddigit '0' + endmacro

// Returns the hexadecimal ASCII character match of the number. (0 <= number <= 15)
macro int-to-xdigit dup 9 > if 'W' else '0' end + endmacro


// -------------------------------------------------------------

// int: x -- int: f(x) bool: valid
// uint: x -- uint: f(x) bool: valid

// Returns the number match of the decimal ASCII character. ('0' <= number <= '9')
// Also returns if the digit is a valid decimal character.
macro ddigit-to-int let _digit_ in _digit_ '0' - _digit_ '0' '9' is-range end endmacro

// Returns the number match of the hexadecimal ASCII character.
// Also returns if the digit is a valid hexadecimal character.
macro xdigit-to-int let _digit_ in 
  _digit_ is-ddigit if
    _digit_ '0' - true
  else _digit_ is-xeldigit if
    _digit_ 'W' - true
  else
    _digit_ '7' - _digit_ is-xeudigit
  end end
end endmacro


// -------------------------------------------------------------

// int: x int: y -- int: (x+y)/2
// fixed64: x fixed64: y -- fixed64: (x+y)/2

// Returns the arithmetical average of the 3 numbers.
macro avg2 +   2 / endmacro


// -------------------------------------------------------------

// int: x int: y int: z -- int: (x+y+z)/3
// fixed: x fixed: y fixed: z -- fixed: (x+y+z)/3

// Returns the arithmetical average of the 3 numbers.
macro avg3 + + 3 / endmacro

// -------------------------------------------------------------

// int: x int: a int: b -- bool: contain(x, [a, b])

// Returns true if x is in the range of [a, b].
macro is-range  let _x_ _a_ _b_ in _x_ _a_ < if false else _b_ _x_ < ! end end endmacro

// Returns true if x is NOT in the range of [a, b].
macro isn-range let _x_ _a_ _b_ in _x_ _a_ < if true  else _b_ _x_ <   end end endmacro


// -------------------------------------------------------------

// int: x int: b -- int: base(x, b)
// fixed64: x fixed64: b -- fixed64: base(x, b)

// Returns the largest number that is less than or equal to x and is divisible by b.
// lower-base(x, b) = x - (x % b)
macro lower-base let _x_ _base_ in
  _x_ _x_ _base_ % -
end endmacro

// Returns the smallest number that is greater than x and is divisible by b.
// upper-base(x, b) = x + ((-x) % b)
// upper-base(x, b) = lower-base(x, b) + b
macro upper-base let _x_ _base_ in
  _x_ _x_ neg _base_ % +
end endmacro


// -------------------------------------------------------------

// int: x int: y -- int: min(x, y)
// fixed64: x fixed64: y -- fixed64: min/max(x, y)

// Returns the minimum of the two numbers.
macro min2 let _a_ _b_ in
  _a_ _b_ < if _a_ else _b_ end
end endmacro

// Returns the maximum of the two numbers.
macro max2 let _a_ _b_ in
  _a_ _b_ < if _b_ else _a_ end
end endmacro


// -------------------------------------------------------------

// int: x int: y int: z -- int: min(x, y, z)
// fixed64: x fixed64: y fixed64: z -- fixed64: min/max(x, y, z)

// Returns the maximum of the three numbers.
macro max3 let _a_ _b_ _c_ in
  _a_ _b_ < if
    _b_ _c_ < if _c_ else _b_ end
  else
    _a_ _c_ < if _c_ else _a_ end
  end
end endmacro

// Returns the minimum of the three numbers.
macro min3 let _a_ _b_ _c_ in
  _a_ _b_ < if
    _a_ _c_ < if _a_ else _c_ end
  else
    _b_ _c_ < if _b_ else _c_ end
  end
end endmacro


// -------------------------------------------------------------

// int: x int: min int: max -- int: clipped
// fixed64: x fixed64: min fixed64: max -- fixed64: clipped

// Returns x if it is in the range [min, max]. If it is less, returns min and if it is higher, returns max.
macro clip let _x_ _min_ _max_ in
  _x_ _min_ < if
    _min_
  else
    _max_ _x_ < if
      _max_
    else
      _x_
    end
  end
end endmacro


// -------------------------------------------------------------

// int: x int: y -- int: min(x, y) int: max(x, y)
// fixed64: x fixed64: y -- fixed64: min(x, y) fixed64: max(x, y)

// Sorts two numbers in the stack.
macro sort2 let _a_ _b_ in
  _a_ _b_ < if
    _a_ _b_
  else
    _b_ _a_
  end
end endmacro


// -------------------------------------------------------------

// int: x int: y int: z -- int: min(x, y, z) int: mid(x, y, z) int: max(x, y, z)
// fixed64: x fixed64: y fixed64: z -- fixed64: min(x, y, z) fixed64: mid(x, y, z) fixed64: max(x, y, z)

// Sorts three numbers in the stack.
macro sort3 let _a_ _b_ _c_ in
  _a_ _b_ < if
    _a_ _c_ < if
      _a_ _b_ _c_ < if _b_ _c_ else _c_ _b_ end
    else
      _c_ _a_ _b_
    end
  else
    _a_ _c_ < if
      _b_ _a_ _c_
    else
      _b_ _c_ < if _b_ _c_ else _c_ _b_ end _a_
    end
  end
end endmacro
