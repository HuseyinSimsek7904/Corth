include "core/memory.corth"
include "collections/array64.corth"

namespace list64

// ptr: list64 -> ptr: dynamic
macro get-dynamic @64 endmacro

// ptr: dynamic ptr: list64 ->
macro set-dynamic !64 endmacro

// ptr: list64 -> ptr: length
macro length-addr list64:get-dynamic endmacro

// ptr: list64 -> ptr: array
macro array-addr list64:get-dynamic 8 + endmacro

// ptr: list64 -> ptr: array int: length
macro to-array let _list_ in
  _list_ list64:array-addr _list_ list64:length
end endmacro

// ptr: list64 -> ptr: array
macro copy-array list64:to-array to-dynamic64 endmacro

// ptr: list64 -> int: length
macro length list64:length-addr @64 endmacro

// ptr: list64 -> ptr: end-addr
// Returns the address of array.length()th item of array.
macro end-addr let _list_ in
  _list_ list64:length _list_ list64:array-addr array64:get-addr
end endmacro

// ptr: list64 -> int: capacity
// Capacity is the total amount of indexes available.
macro capacity list64:get-dynamic mlength 8 / dec endmacro

// ptr: list64 -> int: avail
// Returns the number of indexes available on the list without any resizing.
macro avail let _list_ in
  _list_ list64:get-dynamic mlength 8 / _list_ list64:length - dec
end endmacro

// int: index ptr: list64 -> ptr: address
macro get-addr list64:array-addr array64:get-addr endmacro

// int: index ptr: list64 -> int: value
// NOTE: This macro assumes that the index is valid.
macro get list64:get-addr @64 endmacro

// int: value int: index ptr: list64 ->
// NOTE: This macro assumes that the index is valid.
macro set list64:get-addr !64 endmacro

// ptr: list64 ->
macro inc-length list64:length-addr @inc64 endmacro

// ptr: list64 ->
macro dec-length list64:length-addr @dec64 endmacro

// ptr: list64 -> ptr: new-addr
macro new-addr let _list_ in
  _list_ list64:length _list_ list64:get-addr
end endmacro

// ptr: list64 -> int: last
macro get-new list64:new-addr @64 endmacro

// int: value ptr: list64 ->
macro set-new list64:new-addr !64 endmacro


// -> ptr: dynamic-object
// Initial capacity is 16 items. (8 * 16 + 8 = 136 bytes)
// Save the dynamic object to a variable and use that variable address as the list object.
proc init -> ptr in
  136 malloc let _dynamic_ in
    _dynamic_ isn-null if 0 _dynamic_ !64 end
  _dynamic_ end
end

proc mfree
  // ptr: list64 -> bool: successful
  ptr -> bool
in let list in
  list list64:get-dynamic mfree
end end

// ptr: list64 -> bool: successful
proc mfree-deep ptr -> bool in let _list_ in
  0 while dup _list_ list64:length < do peek i in
    i _list_ list64:get mfree drop
  end inc end drop

  _list_ list64:mfree
end end

// int: length ptr: list64 ->
// Length is the expected available length.
proc check-capacity int ptr -> in let length list in
  length list list64:avail < if return end

  // Get the correct next size in bytes and create a new dynamic object.
  list list64:get-dynamic list list64:capacity while 2 * dup length list list64:length + < do end 8 * 8 + dresize-up

  list list64:mfree drop

  list list64:set-dynamic
end end

proc insert
  // int: value int: index ptr: list64 ->
  int int ptr ->
in let value index list in
  // Check if the list has enough capacity.
  1 list list64:check-capacity

  // Move content to right.
  index list list64:get-addr dup 8 + list list64:length index - memcpy64i

  // Set value.
  value index list list64:set

  // Increase the length of the list.
  list list64:inc-length
end end

proc pop
  // int: index ptr: list64 -> int: value
  int ptr -> int
in let index list in
  index list list64:get-addr let page-addr in
    // Return the value.
    page-addr @64

    // Move content to left.
    page-addr 8 + page-addr list list64:length index - dec memcpy64
  end

  list list64:dec-length
end end

proc append
  // int: value ptr: list64 ->
  int ptr ->
in let value list in
  // Check if the list has enough capacity.
  1 list list64:check-capacity

  // Set value.
  value list list64:set-new

  // Increase the length of the list.
  list list64:inc-length
end end

proc pop-last
  // ptr: list64 -> int: value
  ptr -> int
in let list in
  // Decrease the length of the list.
  list list64:dec-length

  // Return the last item.
  list list64:get-new
end end

proc extend-left
  // ptr: array int: length ptr: list64 ->
  ptr int ptr ->
in let array length list in
  length list list64:check-capacity

  list list64:array-addr length list list64:get-addr list list64:length memcpy64i

  array list list64:array-addr length memcpy64
end end

proc extend-right
  // ptr: array int: length ptr: list64 ->
  ptr int ptr ->
in let array length list in
  length list list64:check-capacity

  array list list64:new-addr length memcpy64
end end

// ptr: list64 ->
proc trim ptr -> in let list in
  list list list64:length dresize-down

  list list64:mfree drop

  list list64:set-dynamic
end end

endnamespace
