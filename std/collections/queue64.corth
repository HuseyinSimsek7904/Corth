include core/ptr.corth
include core/stack.corth
include core/memory.corth


/*
  Queue library for Corth.

  Queues are static-placed collections that allow appending and popping items from them

  Appending and popping an item to the end is O(1) while any other index is O(n).

  To create a queue, an array with the preferred size and a pointer should be created.
  After that, the queue should be initialized using queue64.init.
*/

macro queue64.get-addr
  // int: index ptr: queue-start ptr: queue-length -- ptr: address
  let _queue_ _ in 8 * _queue_ + end
endmacro

macro queue64.get
  // int: index ptr: queue-start ptr: queue-length -- int: value
  // Gets an item from a queue.
  // return queue[index]
  // NOTE: This macro assumes that the index is valid.
  queue64.get-addr @64
endmacro

macro queue64.set
  // int: value int: index ptr: queue-start ptr: queue-length
  // Sets an item on a queue.
  // queue[index] = value
  // NOTE: This macro assumes that the index is valid.
  queue64.get-addr !64
endmacro

proc queue64.overwrite
  // ptr: array-start int: array-length ptr: queue-start ptr: queue-length --
  ptr int ptr ptr --
in let array-start array-length queue-start queue-length in
  array-start queue-start array-length memcpy64
  array-length queue-length !64
end end

proc queue64.insert
  // int: byte-to-insert int: index-to-insert ptr: queue-start ptr: queue-length
  int int ptr ptr --
  // Inserts an item to a queue.
  // queue.insert(value, index)
  // NOTE: This procedure assumes that the queue has enough space to insert item.
in let value index queue-start queue-length in
  queue-start index 8 * + let page-addr in
    // Move content to right.
    page-addr page-addr 8 + queue-length @64 index - memcpy64i
    value queue-start index 8 * + !64
    queue-length @inc64
  end
end end

proc queue64.pop
  // int: index-to-pop ptr: queue-start ptr: queue-length -- int: value
  int ptr ptr -- int
  // Pops an item from a queue.
  // return queue.pop(index)
in let index queue-start queue-length in
  queue-start index 8 * + let page-addr in
    // Return the value at page address.
    page-addr @64

    // Move the contents to the left.
    page-addr 8 + page-addr queue-length @64 index - dec memcpy64
  end
  queue-length @dec64
end end

macro queue64.append
  // int: value ptr: queue-start ptr: queue-length
  // Appends an item to a queue.
  // queue.append(value)

  let _value_ _queue_ _length_ in
    _value_ _queue_ _length_ @64 8 * + !64
    _length_ @inc64
  end
endmacro

macro queue64.pop-last
  // int: value ptr: queue-start ptr: queue-length
  // Removes the last item of the queue.
  // return queue.pop(queue.length - 1)

  let _queue_ _length_ in
    _length_ @dec64
    _queue_ _length_ @64 8 * + @64
  end
endmacro
