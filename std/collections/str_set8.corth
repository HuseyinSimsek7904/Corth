include collections/list64.corth
include collections/str_sorted8.corth

// Sets are sorted list objects with exactly 0 or 1 one of each instance.
// str objects must be dynamic objects.

macro str-set8.available-dstr
  // ptr: str ptr: str-set -- bool: contains

  let _str_ _set_ in
    _str_ _set_ list64.array-addr _set_ list64.end-addr str-sorted8.available-dstr
  end
endmacro

proc str-set8.add
  // ptr: str ptr: str-set -- bool: added
  ptr ptr -- bool
in let value str-set in
  // If the string already exists in the set, return false.
  value str-set str-set8.available-dstr if drop false return end

  str-set list64.array-addr - 8 / let index in
    // Add the item to the list dynamic object.
    value index str-set list64.insert

    // Item was added to the set, return true.
    true
  end
end end

proc str-set8.remove
  // ptr: str ptr: str-set -- bool: removed
  ptr ptr -- bool
in let value str-set in
  // If the string does not exist, return false.
  value str-set str-set8.available-dstr ! if drop false return end

  // Remove the item from the list dynamic object.
  str-set list64.get-dynamic - 8 / str-set list64.pop drop

  // Item was removed from the set, return true.
  true
end end

proc str-set8.union
  // ptr: set1 ptr: set2 -- ptr: union-set
  ptr ptr -- ptr
  // Creates and returns a set that is the union of two sets.
  // NOTE: If malloc fails, NULLPTR is returned.
  // NOTE: Returned pointer is only the dynamic object.
  // TODO: This function could be more efficient with list64.extend.
  // TODO: This function could probably be more efficient using another algorithm.
  // TODO: The maximum length of the union set is already known, m(A) + m(B). This can be used to make this algorithm more efficient.
in let set1 set2 in
  set1 list64.end-addr set2 list64.end-addr let end1 end2 in
    memory hand1 sizeof(ptr) in
    memory hand2 sizeof(ptr) in
    memory union sizeof(ptr) in

      // Start the hands at the start points of the list starts.
      set1 list64.array-addr hand1 !64
      set2 list64.array-addr hand2 !64

      16 list64.init let dynamic in
        // If malloc fails, return NULLPTR.
        dynamic is-null if
          NULLPTR return
        end
      end

      while true do
        hand1 @64 end1 = if
          // If both hands reached the end, break the loop.
          hand2 @64 end2 = if union return end

          // If hand1 reached the end, append the value at hand2.
          hand2 @64 union list64.append

          // Move the hand2 once to the right.
          hand2 @64 8 + hand2 !64

        else hand2 @64 end2 = if
          // If hand2 reached the end, append the value at hand1.
          hand1 @64 union @64 list64.append

          // Move the hand1 once to the right.
          hand1 @64 8 + hand1 !64

        else
          // To get the smallest string, compare the strings.
          hand1 @64 hand2 @64 dmemcmp8 let compare in
            compare is-zero if
              // If str1=str2, move the hand1 once to the right.
              hand1 @64 8 + hand1 !64
            end

            // Return the minimum of the hands.
            compare is-neg if hand1 else hand2 end

            let hand-addr in
              // Append the selected hand.
              hand-addr @64 union list64.append

              // Move the selected hand once to the right.
              hand-addr @64 8 + hand-addr !64
            end
          end
        end end
      end
    end end end
  end
end NULLPTR end // dummy-return

proc str-set8.intersection
  // ptr: set1 ptr: set2 -- ptr: intersection-set
  ptr ptr -- ptr
  // Creates and returns a set that is the intersection of two sets.
  // NOTE: If malloc fails, NULLPTR is returned.
  // NOTE: Returned pointer is only the list dynamic object.
  // TODO: This function could probably be more efficient using another algorithm.
  // TODO: The maximum length of the intersection set is already known, min(m(A), m(B)). This can be used to make this algorithm more efficient.
in let set1 set2 in
  set1 list64.end-addr set2 list64.end-addr let end1 end2 in
    memory hand1 sizeof(ptr) in
    memory hand2 sizeof(ptr) in
    memory inter sizeof(ptr) in

      // Start the hands at the start points of the list starts.
      set1 list64.array-addr hand1 !64
      set2 list64.array-addr hand2 !64

      16 list64.init let dynamic in
        // If malloc fails, return NULLPTR.
        dynamic is-null if
          NULLPTR return
        end
      end

      while true do
        // If any hand has reached the end, break the loop.
        hand1 @64 end1 = if inter return end
        
        // To get the smallest string, compare the strings.
        hand1 @64 hand2 @64 dmemcmp8 let compare in
          compare is-zero if
            // If str1=str2, item is in the intersection. Add the item to inter.
            hand1 @64 inter list64.append

            // Move both the hands once to the right.
            hand1 @64 8 + hand1 !64
            hand2 @64 8 + hand2 !64
            
          else
            // Return the minimum of the hands.
            compare is-neg if hand1 else hand2 end

            // Move the selected hand once to the right.
            let hand-addr in
              hand-addr @64 8 + hand-addr !64
            end
          end
        end  
      end
    end end end
  end
end NULLPTR end // dummy-return
