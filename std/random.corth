include "core/stack.corth"


memory rng-seed sizeof(int) end


macro rand64
  // -> int: next
  // The result integer is in the range [0, 2^64) with the step size of 1.

  // -> fixed64: next
  // The result fixed64 is in the range [0, 2^32) with the step size of 2^-32.
  rng-seed @64 0xFFFFFFFFFFFFFFC5 u*
  rng-seed @64 0xFFFFFFFFFFFFFFC5 u*2 +
  23 +
  let _x_ in
    _x_ 0x400000000000 u/ _x_ 0x20000 u/ u* _x_ 2 / ^^ dup rng-seed !64
  end
endmacro


// If precompilation gets added to the compiler, this procedure will lose its meaning and rand-unif-range will be as efficient as this function.
// But until that day, this function will be more efficient for ranges of [0, b).
macro rand-unif
  // int: x -> int: uniform(x)
  // Returns a number in the range [0, x) with the step size of 1.

  // fixed64: x -> fixed64: uniform(x)
  // Returns a number in the range [0, x) with the step size of 2^-32.

  // uniform(x) = rand64 % x
  let _end_ in
    rand64 _end_ %
  end
endmacro


macro rand-unif-range
  // int: a int: b -> int: uniform-range(a, b)
  // Returns a number in the range [a, b) with the step size of 1.

  // fixed64: a fixed64: b -> fixed64: uniform(a, b)
  // Returns a number in the range [a, b) with the step size of 2^-32.

  // uniform-range(a, b) = a + uniform(b - a)
  let _start_ _end_ in
    rand64 _start_ _end_ - % _end_ +
  end
endmacro


proc shuffle8
  // ptr: container int: length ->
  ptr int ->
  // Shuffles a container that has 1-byte items using Fisher-Yates algortihm.
  // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
  // Runs with O(n) time complexity.
in let array-ptr array-length in
  array-length while dec dup isn-zero do let i in
    i inc rand-unif let j in
      array-ptr i +
      array-ptr j +
      let x y in
        x @8 y @8 x !8 y !8
      end
    end
  i end end drop
end end


proc shuffle64
  // ptr: container int: length ->
  ptr int ->
  // Shuffles a container that has 8-byte items using Fisher-Yates algortihm.
  // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
  // Runs with O(n) time complexity.
in let array-ptr array-length in
  array-length while dec dup isn-zero do let i in
    i inc rand-unif let j in
      array-ptr i 8 * +
      array-ptr j 8 * +
      let x y in
        x @64 y @64 x !64 y !64
      end
    end
  i end end drop
end end
