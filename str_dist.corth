// malloc library is required.

include libs/dynamic/utils.corth
include libs/core/stack.corth
include libs/core/arithmetic.corth
include libs/collections/array64.corth

/*
    String distance library for Corth

  String distance is calculated using the Levenshtein algorithm.
*/

// 'memo' is a dynamicly placed 2D array of integers which is used for memoization.
// =0 -> unknown
// >0 -> known
memory str-dist.memo sizeof(ptr) end

memory str-dist.sptr sizeof(ptr) end
memory str-dist.sint sizeof(int) end
memory str-dist.dptr sizeof(ptr) end
memory str-dist.dint sizeof(int) end

proc str-dist.reset-memo -- in
  // Forgets everything and/or clears the trash in the memo buffer.
  // If new strings are going to be used, this must be called after the source and destination variables are changed.
  str-dist.memo @64 str-dist.memo @64 mlength 0 memset64
end

proc str-dist.init-memo
  // int: max-length --
  int --
  // Creates the memo buffer.
  // NOTE: str-dist.memo must be set to null before calling this procedure for the first time.
in
  str-dist.memo isn-null if
    str-dist.memo @64 mfree
  end
  
  sqr malloc str-dist.memo !64
end

proc str-dist.get-dist
  // int: source-length int: destination-length -- int: distance 
  int int -- int
in let src-length dst-length in
  src-length is-zero if
    dst-length str-dist.append-cost * return
  end

  dst-length is-zero if
    src-length str-dist.remove-cost * return
  end

  // Check if the last characters are the same. If so, remove them and use recursion.
  // Using the same character does not increase the distance.
  str-dist.sptr src-length + @8 str-dist.dptr dst-length + @8 = if
    src-length dec dst-length dec str-dist.get-dist return
  end

  src-length dec dst-length str-dist.get-dist str-dist.remove-cost +  // Removing a character.
  src-length dst-length dec str-dist.get-dist str-dist.append-cost +  // Appending a character.
  src-length dec dst-length dec str-dist.get-dist str-dist.sptr src-length + @8 str-dist.dptr dst-length + @8 str-dist.replace-cost +  // Replacing a character.

  // Take the mininum distance and return.
  min3
end end

proc str-dist.find-closest
  // ptr: compare-string ptr: match-array int: match-length -- ptr: best-match int: distance
  ptr ptr int -- ptr int
  // Finds the closest string out of several strings.
  // Can be useful for code complation.
  
  // NOTE: compare-string must be a dynamicly placed string object.
  // NOTE: match-array must contain dynamicly placed string objects.
  // NOTE: str-dist.memo must be set to null before calling this procedure for the first time.
  // NOTE: Not exactly the most optimized code, but good enough to use in situations where speed is not really much important.
in let compare match-array match-length in
  0 while dup match-length < do let i in
    match-array i 8 * + @64 let match in
      compare mlength match-array match-length array64.min
    end
  i end inc end drop
end end
