include "linux_x86/io/output.corth"
include "core/arithmetic.corth"

include "debug.corth"

// TODO: Change these arrays with vectors.
macro GLOBALS-MAX-COUNT   0x8000     endmacro
macro MACROS-MAX-COUNT    0x8000     endmacro
macro PROCS-MAX-COUNT     0x8000     endmacro
macro LET-MAX-COUNT       0x8000     endmacro
macro LOCALS-MAX-COUNT    0x8000     endmacro

macro EXTENDED-MAX-LENGTH 0x80000    endmacro
macro TOKEN-MAX-LENGTH    0x8000     endmacro
macro STACK-MAX-ITEMS     0x8000     endmacro

macro LOCAL-MEMORY-SIZE   0x80000    endmacro
macro CALL-STACK-SIZE     0x80000    endmacro

// Exit codes
macro SUCCESS-EXIT-CODE    0 endmacro
macro ERROR-EXIT-CODE      1 endmacro
macro SOFT-ERROR-EXIT-CODE 2 endmacro

// Type IDs
macro TYPE-UNKNOWN   0 endmacro
macro TYPE-NAME      1 endmacro
macro TYPE-INTEGER   2 endmacro
macro TYPE-KEYWORD   3 endmacro
macro TYPE-INTRINSIC 4 endmacro
macro TYPE-STRING    5 endmacro
macro TYPE-INT-TYPE  6 endmacro

// Type strings
macro TYPE-UNKNOWN-STR   "<unknown>" endmacro
macro TYPE-NAME-STR      "name"      endmacro
macro TYPE-INTEGER-STR   "integer"   endmacro
macro TYPE-KEYWORD-STR   "keyword"   endmacro
macro TYPE-INTRINSIC-STR "intrinsic" endmacro
macro TYPE-STRING-STR    "string"    endmacro
macro TYPE-INT-TYPE-STR  "int-type"  endmacro

// Keyword IDs
macro KEYWORD-UNKNOWN  0  endmacro
macro KEYWORD-MACRO    1  endmacro
macro KEYWORD-ENDMACRO 2  endmacro
macro KEYWORD-PROC     3  endmacro
macro KEYWORD-RETURNS  4  endmacro
macro KEYWORD-IN       5  endmacro
macro KEYWORD-END      6  endmacro
macro KEYWORD-RETURN   7  endmacro
macro KEYWORD-MEMORY   8  endmacro
macro KEYWORD-AND      9  endmacro
macro KEYWORD-LET      10 endmacro
macro KEYWORD-PEEK     11 endmacro
macro KEYWORD-IF       12 endmacro
macro KEYWORD-ELSE     13 endmacro
macro KEYWORD-WHILE    14 endmacro
macro KEYWORD-DO       15 endmacro
macro KEYWORD-BREAK    16 endmacro
macro KEYWORD-INCLUDE  17 endmacro
macro KEYWORD-CAST     18 endmacro
macro KEYWORD-SIZEOF   19 endmacro

// Keyword strings
macro KEYWORD-UNKNOWN-STR  "<unknown>" endmacro
macro KEYWORD-MACRO-STR    "macro"     endmacro
macro KEYWORD-ENDMACRO-STR "endmacro"  endmacro
macro KEYWORD-PROC-STR     "proc"      endmacro
macro KEYWORD-END-STR      "end"       endmacro
macro KEYWORD-RETURN-STR   "return"    endmacro
macro KEYWORD-RETURNS-STR  "->"        endmacro
macro KEYWORD-MEMORY-STR   "memory"    endmacro
macro KEYWORD-AND-STR      "and"       endmacro
macro KEYWORD-IN-STR       "in"        endmacro
macro KEYWORD-LET-STR      "let"       endmacro
macro KEYWORD-PEEK-STR     "peek"      endmacro
macro KEYWORD-IF-STR       "if"        endmacro
macro KEYWORD-ELSE-STR     "else"      endmacro
macro KEYWORD-WHILE-STR    "while"     endmacro
macro KEYWORD-DO-STR       "do"        endmacro
macro KEYWORD-BREAK-STR    "break"     endmacro
macro KEYWORD-INCLUDE-STR  "include"   endmacro
macro KEYWORD-CAST-STR     "cast"      endmacro
macro KEYWORD-SIZEOF-STR   "sizeof"    endmacro

// Intrinsic IDs
macro INTRINSIC-UNKNOWN  0  endmacro
macro INTRINSIC-ADD      1  endmacro
macro INTRINSIC-SUB      2  endmacro
macro INTRINSIC-MUL      3  endmacro
macro INTRINSIC-MUL2     4  endmacro
macro INTRINSIC-DIV      5  endmacro
macro INTRINSIC-MOD      6  endmacro
macro INTRINSIC-UMUL     7  endmacro
macro INTRINSIC-UMUL2    8  endmacro
macro INTRINSIC-UDIV     9  endmacro
macro INTRINSIC-UMOD     10 endmacro
macro INTRINSIC-BOR      14 endmacro
macro INTRINSIC-BAND     15 endmacro
macro INTRINSIC-BXOR     16 endmacro
macro INTRINSIC-BNOT     17 endmacro
macro INTRINSIC-LOAD8    18 endmacro
macro INTRINSIC-STORE8   19 endmacro
macro INTRINSIC-LOAD16   20 endmacro
macro INTRINSIC-STORE16  21 endmacro
macro INTRINSIC-LOAD32   22 endmacro
macro INTRINSIC-STORE32  23 endmacro
macro INTRINSIC-LOAD64   24 endmacro
macro INTRINSIC-STORE64  25 endmacro
macro INTRINSIC-SYSCALL0 26 endmacro
macro INTRINSIC-SYSCALL1 27 endmacro
macro INTRINSIC-SYSCALL2 28 endmacro
macro INTRINSIC-SYSCALL3 29 endmacro
macro INTRINSIC-SYSCALL4 30 endmacro
macro INTRINSIC-SYSCALL5 31 endmacro
macro INTRINSIC-SYSCALL6 32 endmacro

// Intrinsic strings
macro INTRINSIC-UNKNOWN-STR  "<unknown>" endmacro
macro INTRINSIC-ADD-STR      "+"         endmacro
macro INTRINSIC-SUB-STR      "-"         endmacro
macro INTRINSIC-MUL-STR      "*"         endmacro
macro INTRINSIC-MUL2-STR     "*2"        endmacro
macro INTRINSIC-DIV-STR      "/"         endmacro
macro INTRINSIC-MOD-STR      "%"         endmacro
macro INTRINSIC-UMUL-STR     "u*"        endmacro
macro INTRINSIC-UMUL2-STR    "u*2"       endmacro
macro INTRINSIC-UDIV-STR     "u/"        endmacro
macro INTRINSIC-UMOD-STR     "u%"        endmacro
macro INTRINSIC-BOR-STR      "||"        endmacro
macro INTRINSIC-BAND-STR     "&&"        endmacro
macro INTRINSIC-BXOR-STR     "^^"        endmacro
macro INTRINSIC-BNOT-STR     "!!"        endmacro
macro INTRINSIC-LOAD8-STR    "@8"        endmacro
macro INTRINSIC-STORE8-STR   "!8"        endmacro
macro INTRINSIC-LOAD16-STR   "@16"       endmacro
macro INTRINSIC-STORE16-STR  "!16"       endmacro
macro INTRINSIC-LOAD32-STR   "@32"       endmacro
macro INTRINSIC-STORE32-STR  "!32"       endmacro
macro INTRINSIC-LOAD64-STR   "@64"       endmacro
macro INTRINSIC-STORE64-STR  "!64"       endmacro
macro INTRINSIC-SYSCALL0-STR "syscall0"  endmacro
macro INTRINSIC-SYSCALL1-STR "syscall1"  endmacro
macro INTRINSIC-SYSCALL2-STR "syscall2"  endmacro
macro INTRINSIC-SYSCALL3-STR "syscall3"  endmacro
macro INTRINSIC-SYSCALL4-STR "syscall4"  endmacro
macro INTRINSIC-SYSCALL5-STR "syscall5"  endmacro
macro INTRINSIC-SYSCALL6-STR "syscall6"  endmacro

// Intrinsic type IDs
macro INT-TYPE-UNKNOWN 0 endmacro
macro INT-TYPE-INT     1 endmacro
macro INT-TYPE-BOOL    2 endmacro

// Intrinsic type strings
macro INT-TYPE-UNKNOWN-STR "<unknown>" endmacro
macro INT-TYPE-INT-STR     "int"       endmacro
macro INT-TYPE-BOOL-STR    "bool"      endmacro

// Intrinsic type sizes
macro INT-TYPE-UNKNOWN-SIZEOF 1 neg endmacro
macro INT-TYPE-INT-SIZEOF         8 endmacro
macro INT-TYPE-BOOL-SIZEOF        8 endmacro

proc get-type-name
  // int: type -> ptr: type-name-ptr int: type-name-length
  int -> ptr int
in let type in
       type TYPE-NAME      = if TYPE-NAME-STR
  else type TYPE-INTEGER   = if TYPE-INTEGER-STR
  else type TYPE-KEYWORD   = if TYPE-KEYWORD-STR
  else type TYPE-INTRINSIC = if TYPE-INTRINSIC-STR
  else type TYPE-STRING    = if TYPE-STRING-STR
  else type TYPE-INT-TYPE  = if TYPE-INT-TYPE-STR
  else                          TYPE-UNKNOWN-STR
  end end end end end end
end end

proc get-keyword-name
  // int: keyword -> ptr: keyword-name-ptr int: keyword-name-length
  int -> ptr int
in let keyword in
       keyword KEYWORD-INCLUDE  = if KEYWORD-INCLUDE-STR
  else keyword KEYWORD-MACRO    = if KEYWORD-MACRO-STR
  else keyword KEYWORD-ENDMACRO = if KEYWORD-ENDMACRO-STR
  else keyword KEYWORD-PROC     = if KEYWORD-PROC-STR
  else keyword KEYWORD-END      = if KEYWORD-END-STR
  else keyword KEYWORD-RETURN   = if KEYWORD-RETURN-STR
  else keyword KEYWORD-RETURNS  = if KEYWORD-RETURNS-STR
  else keyword KEYWORD-MEMORY   = if KEYWORD-MEMORY-STR
  else keyword KEYWORD-AND      = if KEYWORD-AND-STR
  else keyword KEYWORD-IN       = if KEYWORD-IN-STR
  else keyword KEYWORD-LET      = if KEYWORD-LET-STR
  else keyword KEYWORD-PEEK     = if KEYWORD-PEEK-STR      
  else keyword KEYWORD-IF       = if KEYWORD-IF-STR
  else keyword KEYWORD-ELSE     = if KEYWORD-ELSE-STR
  else keyword KEYWORD-WHILE    = if KEYWORD-WHILE-STR
  else keyword KEYWORD-DO       = if KEYWORD-DO-STR
  else keyword KEYWORD-BREAK    = if KEYWORD-BREAK-STR
  else keyword KEYWORD-SIZEOF   = if KEYWORD-SIZEOF-STR
  else                               KEYWORD-UNKNOWN-STR
  end end end end end end end end end end end end end end end end end end
end end

proc get-intrinsic-name
  // int: intrinsic -> ptr: intrinsic-name-ptr int: intrinsic-name-length
  int -> ptr int
in let intrinsic in
       intrinsic INTRINSIC-ADD      = if INTRINSIC-ADD-STR
  else intrinsic INTRINSIC-SUB      = if INTRINSIC-SUB-STR
  else intrinsic INTRINSIC-MUL      = if INTRINSIC-MUL-STR
  else intrinsic INTRINSIC-DIV      = if INTRINSIC-DIV-STR
  else intrinsic INTRINSIC-MOD      = if INTRINSIC-MOD-STR
  else intrinsic INTRINSIC-BOR      = if INTRINSIC-BOR-STR
  else intrinsic INTRINSIC-BAND     = if INTRINSIC-BAND-STR
  else intrinsic INTRINSIC-BXOR     = if INTRINSIC-BXOR-STR
  else intrinsic INTRINSIC-BNOT     = if INTRINSIC-BNOT-STR
  else intrinsic INTRINSIC-LOAD8    = if INTRINSIC-LOAD8-STR
  else intrinsic INTRINSIC-STORE8   = if INTRINSIC-STORE8-STR
  else intrinsic INTRINSIC-LOAD16   = if INTRINSIC-LOAD16-STR
  else intrinsic INTRINSIC-STORE16  = if INTRINSIC-STORE16-STR
  else intrinsic INTRINSIC-LOAD32   = if INTRINSIC-LOAD32-STR
  else intrinsic INTRINSIC-STORE32  = if INTRINSIC-STORE32-STR
  else intrinsic INTRINSIC-LOAD64   = if INTRINSIC-LOAD64-STR
  else intrinsic INTRINSIC-STORE64  = if INTRINSIC-STORE64-STR
  else intrinsic INTRINSIC-SYSCALL0 = if INTRINSIC-SYSCALL0-STR
  else intrinsic INTRINSIC-SYSCALL1 = if INTRINSIC-SYSCALL1-STR
  else intrinsic INTRINSIC-SYSCALL2 = if INTRINSIC-SYSCALL2-STR
  else intrinsic INTRINSIC-SYSCALL3 = if INTRINSIC-SYSCALL3-STR
  else intrinsic INTRINSIC-SYSCALL4 = if INTRINSIC-SYSCALL4-STR
  else intrinsic INTRINSIC-SYSCALL5 = if INTRINSIC-SYSCALL5-STR
  else intrinsic INTRINSIC-SYSCALL6 = if INTRINSIC-SYSCALL6-STR
  else                                   INTRINSIC-UNKNOWN-STR
  end end end end end end end end end end end end end end end end end end end end end end end end
end end

proc get-int-type-name
  // int: int-type -> ptr: int-type-name-ptr int: int-type-name-length
  int -> ptr int
in let int-type in
       int-type INT-TYPE-INT  = if INT-TYPE-INT-STR
  else int-type INT-TYPE-BOOL = if INT-TYPE-BOOL-STR
  else                             INT-TYPE-UNKNOWN-STR
  end end
end end

proc get-int-type-sizeof
  // int: int-type -> int: int-type-sizeof
  int -> int
in let int-type in
       int-type INT-TYPE-INT  = if INT-TYPE-INT-SIZEOF
  else int-type INT-TYPE-BOOL = if INT-TYPE-BOOL-SIZEOF
  else                             INT-TYPE-UNKNOWN-SIZEOF
  end end
end end

macro fput-type let type file in
  // int: type file-desc: file-desc
  // Prints a type.

  type get-type-name file fputs
end endmacro

macro fput-keyword let keyword file in
  // int: keyword file-desc: file-desc
  // Prints a keyword.

  keyword get-keyword-name file fputs
end endmacro

macro fput-intrinsic let intrinsic file in
  // int: intrinsic file-desc: file-desc
  // Prints an intrinsic.

  intrinsic get-intrinsic-name file fputs
end endmacro

macro fput-int-type let int-type file in
  // int: int-type file-desc: file-desc
  // Prints an intrinsic type.

  int-type get-int-type-name file fputs
end endmacro

proc fput-token
  // int: token-type [int|ptr]: token-arg file-desc: file-desc
  int int file-desc ->
in let token-type token-arg file_ in
  token-type file_ fput-type " '" file_ fputs

  token-type TYPE-NAME = if
    token-arg token-arg mlength file_ fputs
  else token-type TYPE-INTEGER = if
    token-arg file_ fputi
  else token-type TYPE-KEYWORD = if
    token-arg file_ fput-keyword
  else token-type TYPE-INTRINSIC = if
    token-arg file_ fput-intrinsic
  else token-type TYPE-STRING = if
    token-arg token-arg mlength file_ fputs
  else token-type TYPE-INT-TYPE = if
    token-arg file_ fput-int-type
  else
    token-arg file_ fputi
  end end end end end end

  "'" file_ fputs
end end

proc get-type-size-modifier
  // int: int-type -> ptr: int-type-size-mod-address int: int-type-size-mod-length
  int -> ptr int
in let type in
  type INT-TYPE-INT = if       "qword"
  else type INT-TYPE-BOOL = if "word"
  else
    LOG.ERR STDERR fputs "Unknown stack data type for 'get-type-size-modifier'.\n" STDERR fputs
    STDERR report-bug
    ERROR-EXIT-CODE exit drop
    NULLPTR 0 // dummy
  end end
end end
