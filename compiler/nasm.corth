include "stack_item.corth"
include "register.corth"

namespace nasm

proc is-signed-dword
  int -> bool
in let value in
  value 0x7fffffff <= value 0x7fffffff neg >= &
end end


proc global-label
  ptr -> ptr
in let name in
  name mlength 7 + malloc let object in
    object is-null if
      "'malloc' failed while allocating space for nasm:fput-alpha.\n" STDERR fputs
      EXIT-CODE:ERROR exit drop
    end

    "global_" drop object 7 memcpy8

    0 while dup name mlength < do peek i in
      name i + @8 let char in
        char 'a' 'z' is-range
        char 'A' 'Z' is-range |
        char '1' '9' is-range | if
          char object 7 + i + !8
        else
          '_' object 7 + i + !8
        end
      end
    end inc end drop
    object
  end
end end


proc convert-alpha
  ptr -> ptr
in let name in
  name mlength malloc let object in
    object is-null if
      "'malloc' failed while allocating space for nasm:fput-alpha.\n" STDERR fputs
      EXIT-CODE:ERROR exit drop
    end

    0 while dup name mlength < do peek i in
      name i + @8 let char in
        char 'a' 'z' is-range
        char 'A' 'Z' is-range |
        char '1' '9' is-range | if
          char object i + !8
        else
          '_' object i + !8
        end
      end
    end inc end drop
    object
  end
end end


proc fput-alpha
  // ptr: output-stream ptr: name -> ptr: output-stream
  ptr ptr -> ptr
in nasm:convert-alpha let object in
  object object mlength ostrbuf:puts
  object mfree drop
end end


proc label
  // ptr: output-stream int: id -> ptr: output-stream
  ptr int -> ptr
in let label in
  ".label_" ostrbuf:puts
  label     ostrbuf:putu
  ":\n"     ostrbuf:puts
end end


proc jump-label
  // ptr: output-stream int: id -> ptr: output-stream
  ptr int -> ptr
in let label in
  "    jmp     .label_" ostrbuf:puts
  label                 ostrbuf:putu
  '\n'                  ostrbuf:putc
end end


proc jump-zero-label
  // ptr: output-stream int: id -> ptr: output-stream
  ptr int -> ptr
in let label in
  "    jz      .label_" ostrbuf:puts
  label                 ostrbuf:putu
  '\n'                  ostrbuf:putc
end end


proc put-register
  // ptr: output-stream int: id -> ptr: output-stream
  ptr int -> ptr
in let register-id in
  register-id register:get-register-name ostrbuf:puts
end end


proc push-register
  // ptr: output-stream int: register-id -> ptr: output-stream
  ptr int -> ptr
in let register-id in
  "    push    " ostrbuf:puts
  register-id    nasm:put-register
                 ostrbuf:putnl
end end


proc add-immediate
  // ptr: output-stream int: immediate -> ptr: output-stream
  ptr int -> ptr
  // NOTE: MAY use R15.
in let immediate in
  immediate is-zero if return end

       immediate 1  = if "    inc     qword [rsp]\n"        ostrbuf:puts
  else immediate -1 = if "    dec     qword [rsp]\n"        ostrbuf:puts

  else immediate is-neg if
    immediate nasm:is-signed-dword if
      "    sub     qword [rsp], "      ostrbuf:puts
      immediate neg                    ostrbuf:putu
                                       ostrbuf:putnl
    else
      "    mov     r15, "              ostrbuf:puts
      immediate neg                    ostrbuf:putu
                                       ostrbuf:putnl
      "    sub     qword [rsp], rax\n" ostrbuf:puts
    end

  else
    immediate nasm:is-signed-dword if
      "    add     qword [rsp], "      ostrbuf:puts
      immediate                        ostrbuf:putu
                                       ostrbuf:putnl
    else
      "    mov     r15, "              ostrbuf:puts
      immediate                        ostrbuf:putu
                                       ostrbuf:putnl
      "    add     qword [rsp], rax\n" ostrbuf:puts
    end
  end end end
end end


proc mov-reg-zero
  // ptr: output-stream int: register-id -> ptr: output-stream
  ptr int -> ptr
in let register-id in
  "    xor     " ostrbuf:puts
  register-id    nasm:put-register
  ", "           ostrbuf:puts
  register-id    nasm:put-register
                 ostrbuf:putnl
end end


proc mov-reg-immediate
  // ptr: output-stream int: immediate int: register-id -> ptr: output-stream
  ptr int int -> ptr
in let immediate register-id in
  immediate is-zero if
     register-id nasm:mov-reg-zero
  else
    "    mov     " ostrbuf:puts
    register-id    nasm:put-register
    ", "           ostrbuf:puts
    immediate      ostrbuf:puti
                   ostrbuf:putnl
  end
end end


proc mov-reg-global-address
  // ptr: output-stream ptr: global-name int: register-id -> ptr: output-stream
  ptr ptr int -> ptr
in let global-name register-id in
  "    mov     " ostrbuf:puts
  register-id    nasm:put-register
  ", global_"    ostrbuf:puts
  global-name    nasm:fput-alpha
                 ostrbuf:putnl
end end


proc mov-reg-local
  // ptr: output-stream int: offset int: register-id -> ptr: output-stream
  ptr int int -> ptr
in let offset register-id in
  "    mov     "    ostrbuf:puts
  register-id       nasm:put-register
  ", [local_ptr]\n" ostrbuf:puts

  offset isn-zero if
    "    add     "  ostrbuf:puts
    register-id     nasm:put-register
    ", "            ostrbuf:puts
    offset          ostrbuf:putu
                    ostrbuf:putnl
  end
end end


proc mov-reg-@64local
  // ptr: output-stream int: offset int: register-id -> ptr: output-stream
  ptr int int -> ptr
in let offset register-id in
  "    mov     "    ostrbuf:puts
  register-id       nasm:put-register
  ", [local_ptr]\n" ostrbuf:puts

  "    mov     "    ostrbuf:puts
  register-id       nasm:put-register
  ", ["             ostrbuf:puts
  register-id       nasm:put-register

  offset isn-zero if
    " + "           ostrbuf:puts
    offset          ostrbuf:putu
  end
  "]\n"             ostrbuf:puts
end end


proc mov-reg-@64global
  // ptr: output-stream ptr: global int: register-id -> ptr: output-stream
  ptr ptr int -> ptr
in let global register-id in
  "    mov     " ostrbuf:puts
  register-id    nasm:put-register
  ", [global_"   ostrbuf:puts
  global         nasm:fput-alpha
  "]\n"          ostrbuf:puts
end end


proc mov-reg-data
  // ptr: output-stream int: index int: register-id -> ptr: output-stream
  ptr int int -> ptr
in let index register-id in
  "    mov     " ostrbuf:puts
  register-id    nasm:put-register
  ", data_"      ostrbuf:puts
  index          ostrbuf:putu
                 ostrbuf:putnl
end end


proc mov-reg-item
  // ptr: output-stream ptr: item int: register-id -> ptr: output-stream
  ptr ptr int -> ptr
in let item register-id in
  item stack-item:get-mode item stack-item:get-arg1 let mode arg1 in
    item stack-item:get-mode STACK-MODE:REAL = if
      "    pop     " ostrbuf:puts
      register-id    nasm:put-register
                     ostrbuf:putnl

    else mode STACK-MODE:IMM         = if arg1 register-id nasm:mov-reg-immediate
    else mode STACK-MODE:GLOBAL      = if arg1 register-id nasm:mov-reg-global-address
    else mode STACK-MODE:@LOCALCONST = if arg1 register-id nasm:mov-reg-@64local
    else mode STACK-MODE:LOCAL       = if arg1 register-id nasm:mov-reg-local
    else mode STACK-MODE:@64LOCAL    = if arg1 register-id nasm:mov-reg-@64local
    else mode STACK-MODE:@64GLOBAL   = if arg1 register-id nasm:mov-reg-@64global
    else mode STACK-MODE:DATA        = if arg1 register-id nasm:mov-reg-data
    else
      LOG:ERR STDERR fputs "Unknown integer mode while trying to move integer to register.\n" STDERR fputs
      STDERR report-bug
      EXIT-CODE:ERROR exit drop
    end end end end end end end end
  end
end end


proc push-immediate
  // ptr: output-stream int: immediate -> ptr: output-stream
  ptr int -> ptr
  // NOTE: Uses R15.
in let immediate in
  immediate nasm:is-signed-dword if
    "    push    qword " ostrbuf:puts
    immediate            ostrbuf:puti
                         ostrbuf:putnl
  else
    "    mov     r15, "  ostrbuf:puts
    immediate            ostrbuf:puti
                         ostrbuf:putnl
    register:R15         nasm:push-register
  end
end end


proc push-global-address
  // ptr: output-stream ptr: global-name -> ptr: output-stream
  ptr ptr -> ptr
in let global in
  "    push    global_" ostrbuf:puts
  global                nasm:fput-alpha
                        ostrbuf:putnl
end end


proc push-@64local
  // ptr: output-stream int: offset -> ptr: output-stream
  ptr int -> ptr
  // NOTE: Uses R15.
in let offset in
  "    mov     r15, [local_ptr]\n" ostrbuf:puts
  "    push    qword [r15"         ostrbuf:puts

  offset isn-zero if
    " + "                          ostrbuf:puts
    offset                         ostrbuf:putu
  end

  "]\n"                            ostrbuf:puts
end end


proc push-@8local
  // ptr: output-stream int: offset -> ptr: output-stream
  ptr int -> ptr
  // NOTE: Uses R15.
in let offset in
  register:R15                     nasm:mov-reg-zero
  "    mov     r15, [local_ptr]\n" ostrbuf:puts
  "    mov     al, [r15"           ostrbuf:puts
  " + "                            ostrbuf:puts
  offset                           ostrbuf:putu
  "]\n"                            ostrbuf:puts
  register:RAX                     nasm:push-register
end end


proc push-@64global
  // ptr: output-stream ptr: global-name -> ptr: output-stream
  ptr ptr -> ptr
in let global in
  "    push    qword [global_" ostrbuf:puts
  global                       nasm:fput-alpha
  "]\n"                        ostrbuf:puts
end end


proc push-@8global
  // ptr: output-stream ptr: global-name -> ptr: output-stream
  ptr ptr -> ptr
in let global in
  register:RAX               nasm:mov-reg-zero
  "    mov     al, [global_" ostrbuf:puts
  global                     nasm:fput-alpha
  "]\n"                      ostrbuf:puts
  register:RAX               nasm:push-register
end end


proc push-local
  // ptr: output-stream int: offset -> ptr: output-stream
  ptr int -> ptr
in let offset in
  "    push    qword [local_ptr]\n" ostrbuf:puts
  offset isn-zero if
    "    add     qword [rsp], "     ostrbuf:puts
    offset                          ostrbuf:putu
                                    ostrbuf:putnl
  end
end end


proc push-data
  // ptr: output-stream int: index -> ptr: output-stream
  ptr int -> ptr
in let index in
  "    push    qword data_" ostrbuf:puts
  index                     ostrbuf:putu
                            ostrbuf:putnl
end end


proc push
  // ptr: output-stream ptr: item -> ptr: output-stream
  ptr ptr -> ptr
in let item in
  item stack-item:get-mode item stack-item:get-arg1 let mode arg1 in
         mode STACK-MODE:IMM         = if arg1 nasm:push-immediate
    else mode STACK-MODE:GLOBAL      = if arg1 nasm:push-global-address
    else mode STACK-MODE:@64GLOBAL   = if arg1 nasm:push-@64global
    else mode STACK-MODE:@LOCALCONST = if arg1 nasm:push-@64local
    else mode STACK-MODE:LOCAL       = if arg1 nasm:push-local
    else mode STACK-MODE:@64LOCAL    = if arg1 nasm:push-@64local
    else mode STACK-MODE:@8LOCAL     = if arg1 nasm:push-@8local
    else mode STACK-MODE:DATA        = if arg1 nasm:push-data
    else mode STACK-MODE:REAL       != if
      LOG:ERR STDERR fputs "Unknown mode while trying to push an item.\n" STDERR fputs
      STDERR report-bug
      EXIT-CODE:ERROR exit drop
    end end end end end end end end end
  end
end end


proc convert-real
  // ptr: output-stream ptr: item -> ptr: output-stream
  ptr ptr -> ptr
in let item in
  item nasm:push
  STACK-MODE:REAL item stack-item:set-mode
end end


proc syscall
  // ptr: output-stream -> ptr: output-stream
  ptr -> ptr
in
  "    syscall\n" ostrbuf:puts
end

endnamespace
