include "dynamic/utils.corth"
include "linux_x86/io/output.corth"
include "core/stack.corth"

namespace LOG
macro INFO  "\x1b[1;97m[INFO]\x1b[0;97m "    endmacro
macro WARN  "\x1b[1;33m[WARNING]\x1b[0;97m " endmacro
macro SOFT  "\x1b[1;31m[SOFT]\x1b[0;97m "    endmacro
macro ERR   "\x1b[1;31m[ERROR]\x1b[0;97m "   endmacro
macro BUG   "\x1b[1;31m[BUG]\x1b[0;97m "     endmacro
macro CMD   "\x1b[1;32m[CMD]\x1b[0;97m "     endmacro
macro TODO  "\x1b[1;35m[TODO]\x1b[0;97m "    endmacro
macro HERE  "\x1b[1;32m[HERE]\x1b[0;97m "    endmacro
endnamespace


// This buffer can be used to easily write many spaces at once.
// NOTE: Trying to write more than .-BUFFER-SIZE characters may cause problems.
macro  SPACE-BUFFER-SIZE 256               endmacro
memory space-buffer      SPACE-BUFFER-SIZE end

macro  TILDE-BUFFER-SIZE 256               endmacro
memory tilde-buffer      TILDE-BUFFER-SIZE end


proc debug-init -> in
  // Set up the space-buffer.
  space-buffer SPACE-BUFFER-SIZE ' ' memset8

  // Set up the tilde-buffer.
  tilde-buffer TILDE-BUFFER-SIZE '~' memset8
end


proc seek-line
  // int: line file-desc: file-desc
  int file-desc ->
  // Shifts the file pointer by a specified amount of lines.
in let file in
  memory char 1 in
    while dup isn-zero do
      // If EOF is reached, returns immediately.
      char 1 file fgets is-zero if drop return end

      // If a newline is reached, decrease the counter.
      char @8 '\n' = if dec end
    end drop
  end
end end


proc fput-line
  // file-desc: source file-desc: file-desc -> int: line-length
  file-desc file-desc -> int
  // Keeps printing until a newline is found.
  // Returns the length of line read.
in let source file in
  memory char 1 in
    0 while true do
      // If EOF is reached, return immediately.
      char 1 source fgets is-zero if return end

      // If a newline character is reached, return immediately.
      char @8 '\n' = if return end

      // Print the byte to the file stream.
      char 1 file fputs
    inc end
  end
end end


proc report-bug
  // file-desc: file-desc ->
  file-desc ->
in let log-stream in
  LOG:ERR log-stream fputs "This should have been impossible to reach.\n" log-stream fputs
  LOG:INFO log-stream fputs "This is probably caused by a bug in the compiler.\n" log-stream fputs
end end
