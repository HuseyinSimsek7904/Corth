// Using namespaces like enumerators.
namespace STACK-MODE
macro REAL             0 endmacro
macro IMM              1 endmacro
macro GLOBAL           2 endmacro
macro @64GLOBAL        3 endmacro
macro @8GLOBAL         4 endmacro
macro LOCAL            5 endmacro
macro @8LOCAL          6 endmacro
macro @64LOCAL         7 endmacro
macro @LOCALCONST      8 endmacro
macro DATA             9 endmacro
macro PEEKED          10 endmacro
endnamespace


namespace stack-item

macro get-type      @64 endmacro
macro set-type      !64 endmacro
macro get-mode 8  + @64 endmacro
macro set-mode 8  + !64 endmacro
macro get-arg1 16 + @64 endmacro
macro set-arg1 16 + !64 endmacro


proc mfree
  // ptr: item ->
  ptr ->
in let item in
  // For now, this only mfrees the dynamic object.
  // This may change in the future.

  item mfree drop
end end


proc copy
  // ptr: item -> ptr: copied
    ptr -> ptr
in let item in
  // For now, this only copies the dynamic object.
  // This may change in the future.

  item dcopy
end end


proc create
  // int: int-type int: mode -> ptr: item
  int int -> ptr
in let int-type mode in
  24 malloc let object in
    object isn-null if
      int-type  object stack-item:set-type
      mode      object stack-item:set-mode
    end

    object
  end
end end

endnamespace
