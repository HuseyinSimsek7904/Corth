include "enums.corth"
include "debug.corth"


proc fgets-keep
  // ptr: start int: length file-desc: file-desc
  ptr int file-desc -> int
  // Reads a region of a file stream and returns file pointer to its original position.
in let start length file in
  // Get original position.
  file ftell let original in

    // Read bytes and return the total bytes read.
    start length file fgets

    // Return the file pointer to its original pointer.
    file original SEEK-WHENCE:SET lseek drop
  end
end end


proc strip-file
  // file-desc: file-> bool: reached-eof
  file-desc -> bool
  // Removes the newline and spaces from the start of a file stream.
  // Also, checks if EOF is reached.
in let file in
  memory char 1 in
    while true do
      // If EOF is reached, return immediately.
      char 1 file fgets is-zero if true return end

      // If a null-terminator is reached, return immediately.
      char @8 is-zero if true return end

      char @8 '\n' != char @8 ' ' != & if
        file -1 SEEK-WHENCE:CUR lseek drop
        false return
      end
    end
  end
end false end  // dummy return


proc parse-next-token
  // file-desc: file ptr: file-name ptr: buffer ptr: buffer-end file-desc: log-stream ->
  file-desc ptr ptr ptr file-desc ->
  // Gets the next token string before any newline or space and fills a buffer.
  // NOTE: If buffer-end exceeds buffer + TOKEN-MAX-LENGTH, exits program.
in let file file-name buffer buffer-end log-stream in
  while true do
    // Reached EOF.
    buffer-end @64 1 file fgets-keep is-zero if return end

    // Reached a newline character.
    buffer-end @64 @8 '\n' = if return end

    // Reached a space character.
    buffer-end @64 @8 ' ' = if return end

    buffer-end @64 buffer - TOKEN-MAX-LENGTH >= if
      // Reached the end of the buffer.
      LOG:ERR log-stream fputs "Found a token longer than TOKEN-MAX-LENGTH, stopping execution.\n" log-stream fputs
      EXIT-CODE:ERROR exit drop
    else
      // There is still space in the buffer.
      file 1 SEEK-WHENCE:CUR lseek drop
      buffer-end @inc64
    end
  end
end end


proc parse-escape-sequence
  // file-desc: file ptr: file-name file-desc: log-stream -> int: escape-character
  file-desc ptr file-desc -> int
in let file file-name log-stream in
  // Buffer is 2 bytes because after \x, 2 new bytes are required.
  memory buffer 2 in
    // Check if we reached EOF before an escape sequence.
    buffer 1 file fgets is-zero if
      LOG:ERR log-stream fputs "Reached EOF while expecting escape sequence.\n" log-stream fputs
      EXIT-CODE:ERROR exit drop
    end

    // Get the mapping of the escape character.
         buffer @8 '0'  = if '\0'
    else buffer @8 'n'  = if '\n'
    else buffer @8 't'  = if '\t'
    else buffer @8 '\'' = if '\''
    else buffer @8 '\"' = if '\"'
    else buffer @8 '\\' = if '\\'
    else buffer @8 'x'  = if
      // Check if we reached EOF before the escape sequence ends.
      buffer 2 file fgets 2 < if
        LOG:ERR log-stream fputs "Reached EOF while expecting 2 characters after escape sequence '\\x'.\n" log-stream fputs
        EXIT-CODE:ERROR exit drop
      end

      // Get the hexadecimal value after '\x'.
      memory number sizeof(int) in
        buffer 2 number convx ! if
          LOG:ERR log-stream fputs "Expected 2 hexadecimal digits after '\\x', however the characters were not digits.\n" log-stream fputs
          EXIT-CODE:ERROR exit drop
        end

        // Return the hexadecimal number.
        number @64
      end
    else
      LOG:ERR log-stream fputs "Invalid escape sequence.\n" log-stream fputs
      EXIT-CODE:ERROR exit drop
    0 end end end end end end end
  end
end end


proc parse-next-string
  // file-desc: file ptr: file-name ptr: buffer ptr: buffer-end file-desc: log-stream ->
  file-desc ptr ptr ptr file-desc ->
  // Gets the next string before a double quote.
  // NOTE: If buffer-end exceeds buffer + TOKEN-MAX-LENGTH, exits program.
  // NOTE: If EOF is reached before a double quote is found, exits program.
  // TODO: Add escapes.
in let file file-name buffer buffer-end log-stream in
  while true do buffer-end @64 let char-addr in
    // Check if we reached EOF before an end of string.
    char-addr 1 file fgets is-zero if
      LOG:ERR log-stream fputs "Reached EOF before finding any '\"'.\n" log-stream fputs
      EXIT-CODE:ERROR exit drop
    end

    // Check if we reached the end of the string.
    char-addr @8 '"' = if
      0 buffer-end @64 !8
      buffer-end @inc64
      return
    end

    // Reached the end of the buffer.
    char-addr buffer - TOKEN-MAX-LENGTH dec >= if
      LOG:ERR log-stream fputs "Found a string longer than TOKEN-MAX-LENGTH, stopping execution.\n" log-stream fputs
      EXIT-CODE:ERROR exit drop
    end

    char-addr @8 '\\' = if
      // Reached a backslash, check for escape sequence.
      file file-name log-stream parse-escape-sequence char-addr !8
    end

    buffer-end @inc64
  end end
end end


proc skip-line
  // file-desc: file-desc ptr: file-name file-desc: log-stream ->
  file-desc ptr file-desc ->
  // Moves the file pointer until it passes a newline, or EOF is reached.
in let file file-name log-stream in
  memory char 1 in
    while true do
      // If EOF is reached, return immediately.
      char 1 file fgets is-zero if return end

      // If a newline character is reached, return immediately.
      char @8 '\n' = if return end
    end
  end
end end


proc skip-block-comment
  // file-desc: file-desc ptr: file-name file-desc: log-stream ->
  file-desc ptr file-desc ->
  // Moves the file pointer until it passes a block comment end, or EOF is reached.
in let file file-name log-stream in
  memory char 1 in
    while true do
      char 1 file fgets is-zero if
        // Reached EOF while expecting a block comment end.
        LOG:WARN log-stream fputs "Reached EOF while expecting a block comment end.\n" log-stream fputs
        return
      end

      // Reached asterisk.
      char @8 '*' = if
        char 1 file fgets is-zero if
          // Reached EOF while expecting a block comment end.
          LOG:WARN log-stream fputs "Reached EOF while expecting a block comment end.\n" log-stream fputs
          return
        end

        // Reached block comment end.
        char @8 '/' = if return end
      end
    end
  end
end end


proc create-name-token
  // ptr: file-name file-desc: file-desc
  ptr file-desc
  // ptr: buffer ptr: buffer-end
  ptr ptr
  // file-desc: log-stream ->
  file-desc ->
  // int: token-type ptr: address [int|ptr]: arg
  int ptr int

  // Checks if the name is a keyword or an intrinsic, and creates a new token.
  // After the keyword and intrinsic checks, macros are checked for any match. If there is any macro with the same name, the macro tokens are loaded to a buffer.
in let
  file-name file
  buffer buffer-end
  log-stream
in

  // Get full token.
  file file-name buffer buffer-end log-stream parse-next-token

  buffer-end @64 buffer - let buffer-size in
    // Check if the token is a keyword.
    // I hate my life.
         buffer buffer-size KEYWORD-NAME:INCLUDE       memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:INCLUDE
    else buffer buffer-size KEYWORD-NAME:MACRO         memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:MACRO
    else buffer buffer-size KEYWORD-NAME:ENDMACRO      memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:ENDMACRO
    else buffer buffer-size KEYWORD-NAME:NAMESPACE     memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:NAMESPACE
    else buffer buffer-size KEYWORD-NAME:ENDNAMESPACE  memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:ENDNAMESPACE
    else buffer buffer-size KEYWORD-NAME:PROC          memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:PROC
    else buffer buffer-size KEYWORD-NAME:END           memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:END
    else buffer buffer-size KEYWORD-NAME:RETURN        memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:RETURN
    else buffer buffer-size KEYWORD-NAME:RETURNS       memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:RETURNS
    else buffer buffer-size KEYWORD-NAME:MEMORY        memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:MEMORY
    else buffer buffer-size KEYWORD-NAME:AND           memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:AND
    else buffer buffer-size KEYWORD-NAME:IN            memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:IN
    else buffer buffer-size KEYWORD-NAME:LET           memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:LET
    else buffer buffer-size KEYWORD-NAME:PEEK          memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:PEEK
    else buffer buffer-size KEYWORD-NAME:IF            memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:IF
    else buffer buffer-size KEYWORD-NAME:ELSE          memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:ELSE
    else buffer buffer-size KEYWORD-NAME:WHILE         memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:WHILE
    else buffer buffer-size KEYWORD-NAME:DO            memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:DO
    else buffer buffer-size KEYWORD-NAME:BREAK         memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:BREAK
    else buffer buffer-size KEYWORD-NAME:CAST          memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:CAST
    else buffer buffer-size KEYWORD-NAME:SIZEOF        memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:SIZEOF

    // I still hate my life.
    else buffer buffer-size INTRINSIC-NAME:ADD         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:ADD
    else buffer buffer-size INTRINSIC-NAME:SUB         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SUB
    else buffer buffer-size INTRINSIC-NAME:MUL         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:MUL
    else buffer buffer-size INTRINSIC-NAME:MUL2        memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:MUL2
    else buffer buffer-size INTRINSIC-NAME:DIV         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:DIV
    else buffer buffer-size INTRINSIC-NAME:MOD         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:MOD
    else buffer buffer-size INTRINSIC-NAME:BOR         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:BOR
    else buffer buffer-size INTRINSIC-NAME:BAND        memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:BAND
    else buffer buffer-size INTRINSIC-NAME:BXOR        memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:BXOR
    else buffer buffer-size INTRINSIC-NAME:BNOT        memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:BNOT
    else buffer buffer-size INTRINSIC-NAME:LOAD8       memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:LOAD8
    else buffer buffer-size INTRINSIC-NAME:STORE8      memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:STORE8
    else buffer buffer-size INTRINSIC-NAME:LOAD16      memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:LOAD16
    else buffer buffer-size INTRINSIC-NAME:STORE16     memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:STORE16
    else buffer buffer-size INTRINSIC-NAME:LOAD32      memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:LOAD32
    else buffer buffer-size INTRINSIC-NAME:STORE32     memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:STORE32
    else buffer buffer-size INTRINSIC-NAME:LOAD64      memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:LOAD64
    else buffer buffer-size INTRINSIC-NAME:STORE64     memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:STORE64
    else buffer buffer-size INTRINSIC-NAME:SYSCALL0    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL0
    else buffer buffer-size INTRINSIC-NAME:SYSCALL1    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL1
    else buffer buffer-size INTRINSIC-NAME:SYSCALL2    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL2
    else buffer buffer-size INTRINSIC-NAME:SYSCALL3    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL3
    else buffer buffer-size INTRINSIC-NAME:SYSCALL4    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL4
    else buffer buffer-size INTRINSIC-NAME:SYSCALL5    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL5
    else buffer buffer-size INTRINSIC-NAME:SYSCALL6    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL6

    else buffer buffer-size INT-TYPE-NAME:INT          memcmp8-wl is-zero if TOKEN-TYPE:INT-TYPE INT-TYPE:INT
    else buffer buffer-size INT-TYPE-NAME:BOOL         memcmp8-wl is-zero if TOKEN-TYPE:INT-TYPE INT-TYPE:BOOL

    else
      // Return token type and argument.
      TOKEN-TYPE:NAME buffer buffer-size to-dynamic8

    // This is nightmare fuel.
    end end end end end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end end end end end

    // Return the token.
    let token-type token-arg in
      token-type 0 token-arg
    end
  end
end end


proc get-next-token
  // ptr: file-name file-desc: file-desc
  ptr file-desc
  // ptr: extended-tokens-array ptr: extended-tokens-start-index ptr: extended-tokens-end-index
  ptr ptr ptr
  // ptr: macro-names ptr: macro-tokens ptr: macros-length
  ptr ptr ptr
  // file-desc: log-stream bool: extend-macros --
  file-desc bool ->
  // int: token-type ptr: address [int|ptr]: arg bool: is-available
  int ptr int bool

  // Generates a token and returns.
  // NOTE: If there is no token available, every other parameter is either NULLPTR or invalid.
in let
  file-name file
  extended-array extended-start extended-end
  macro-names macro-tokens macros-length
  log-stream extend-macros
in

  extended-end @64 extended-start @64 - let extended-length in
    // If there are remaining tokens in the extended queue, return the remaining item.
    extended-length isn-zero if
      extended-length 3 % isn-zero if
        LOG:ERR log-stream fputs "Extended array length is not a multiple of 3.\n" log-stream fputs
        log-stream report-bug
        EXIT-CODE:ERROR exit drop
      end

      extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:pop-first
      extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:pop-first
      extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:pop-first

    else
      memory buffer     TOKEN-MAX-LENGTH in
      memory buffer-end sizeof(int)      in

        file strip-file if
          TOKEN-TYPE:UNKNOWN NULLPTR 0 false return
        end

        buffer buffer-end !64

        buffer 1 file fgets drop
        buffer-end @inc64

        buffer @8 is-ddigit if
          // -------- Integer type --------

          // Get full token.
          file file-name buffer buffer-end log-stream parse-next-token

          memory number sizeof(int) in
            buffer buffer-end @64 buffer - number convint ! if
              LOG:ERR log-stream fputs "Could not convert integer.\n" log-stream fputs
              EXIT-CODE:ERROR exit drop
            end

            TOKEN-TYPE:INTEGER 0 number @64
          end

        else buffer @8 '\'' = if
          // -------- Characters --------
          // TODO: Add multpile character pushing.

          buffer inc 1 file fgets is-zero if
            // Reached EOF while expecting a character.
            LOG:ERR log-stream fputs "Reached EOF before finding a character after single quote.\n" log-stream fputs
            EXIT-CODE:ERROR exit drop
          end

          // Get the character
          buffer inc @8 let character in
            character '\n' = if
              LOG:ERR log-stream fputs "Reached EOL before finding a character after single quote.\n" log-stream fputs
              EXIT-CODE:ERROR exit drop
            end

            character '\'' = if
              LOG:ERR log-stream fputs "Single quote character must be escaped.\n" log-stream fputs
              EXIT-CODE:ERROR exit drop
            end

            character '\\' = if
              // Return the escape sequence character.
              file file-name log-stream parse-escape-sequence
            else
              // Return the character itself.
              character
            end
          end

          let character in
            buffer 1 file fgets is-zero if
              // Reached EOF while expecting a single quote.
              LOG:ERR log-stream fputs "Reached EOF before finding a single quote after single quote and character.\n" log-stream fputs
              EXIT-CODE:ERROR exit drop
            end

            buffer @8 '\'' != if
              // Was expecting a single quote, but found another character.
              LOG:ERR log-stream fputs "Expected a single quote, found '" log-stream fputs buffer 1 log-stream fputs "'.\n" log-stream fputs
              EXIT-CODE:ERROR exit drop
            end

            // Return token type, position and argument.
            TOKEN-TYPE:INTEGER 0 character
          end

        else buffer @8 '"' = if
          // -------- String type --------

          // Move the buffer-end left once, so the quote is removed.
          buffer-end @dec64

          // Get full string.
          file file-name buffer buffer-end log-stream parse-next-string

          // Return token type, position and argument.
          TOKEN-TYPE:STRING 0 buffer buffer-end @64 buffer - to-dynamic8

        else buffer @8 '-' = if
          // -------- Dash (Integers and names) --------

          buffer inc 1 file fgets is-zero if
            LOG:ERR log-stream fputs "Reached EOF while expecting character after dash (-).\n" log-stream fputs
            EXIT-CODE:ERROR exit drop
          end

          buffer-end @inc64

          buffer inc @8 is-ddigit if
            // Get full token.
            file file-name buffer buffer-end log-stream parse-next-token

            memory number sizeof(int) in
              buffer buffer-end @64 buffer - number convint ! if
                LOG:ERR log-stream fputs "Could not convert integer.\n" log-stream fputs
                EXIT-CODE:ERROR exit drop
              end

              TOKEN-TYPE:INTEGER 0 number @64
            end

          else
            file -1 SEEK-WHENCE:CUR lseek drop

            buffer-end @dec64

            file-name file buffer buffer-end log-stream create-name-token
          end

        else buffer @8 '/' = if
          // -------- Slash (Name and comments) --------

          buffer inc 1 file fgets is-zero if
            LOG:ERR log-stream fputs "Reached EOF while expecting character after slash (/).\n" log-stream fputs
            EXIT-CODE:ERROR exit drop
          end

          buffer inc @8 '/' = if
            // -------- Single line comment --------

            // Skip this line.
            file file-name log-stream skip-line

            // Get next token and return it.
            file-name file extended-array extended-start extended-end macro-names macro-tokens macros-length log-stream extend-macros get-next-token ! if false return end

          else buffer inc @8 '*' = if
            // -------- Block comment --------

            // Skip the block comment.
            file file-name log-stream skip-block-comment

            // Get next token and return it.
            file-name file extended-array extended-start extended-end macro-names macro-tokens macros-length log-stream extend-macros get-next-token ! if false return end
          else
            // -------- Name and keyword types --------
            file -1 SEEK-WHENCE:CUR lseek drop

            file-name file buffer buffer-end log-stream create-name-token
          end end

        else
          // -------- Name and keyword types --------
          file-name file buffer buffer-end log-stream create-name-token
        end end end end end
      end
    end end

    // If macros should not be extended, return immediately.
    extend-macros ! if true return end

    // If macros should be extended, check if the token is a macro call.
    let type address arg in
      type TOKEN-TYPE:NAME = if
        arg macro-names macro-tokens macros-length str-map64:get-dstr if
          let tokens in
            tokens tokens mlength + while dup tokens > do 24 - let i in
              i @64 i 8 + @64 i 16 + @64 let token-type token-address token-argument in
                // -- Token argument --
                // If the type of the token is a 'name' or a 'string', we need to copy the argument.
                token-argument token-type TOKEN-TYPE:NAME = token-type TOKEN-TYPE:STRING = | if dcopy end
                extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:append-first

                // -- Token address --
                // Change the ADDR.PREV of the address.
                0 extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:append-first

                // -- Token type --
                token-type extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:append-first
              end
            i end end drop

            file-name file extended-array extended-start extended-end macro-names macro-tokens macros-length log-stream extend-macros get-next-token

            // Deallocate 'arg'.
            arg mfree drop
          end
        else drop
          type address arg true
        end
      else
        type address arg true
      end
    end
  end
end end
